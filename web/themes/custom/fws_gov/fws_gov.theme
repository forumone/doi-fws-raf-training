<?php

/**
 * @file
 * Functions to support theming in the fws theme.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Language\LanguageInterface;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\taxonomy\entity\term;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 **/
function fws_gov_preprocess_html(array &$variables) {
  // Add class to html tag
  // $variables['attributes']['class'][] = 'YOURCLASS';
  // $variables['div']['main-container'][] = 'has-slideshow';
  // Don't display the site name twice on the front page (and potentially others)
  // if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
  //   $variables['head_title'] = $variables['head_title_array']['name'];
  // }.
  // Adds DAP tracking for all public-facing pages
  // See: https://digital.gov/guides/dap/add-your-site-dap/
  if (\Drupal::currentUser()->isAnonymous()) {
    $variables['page']['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'async' => TRUE,
          'id' => '_fed_an_ua_tag',
          'type' => 'text/javascript',
          'src' => 'https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=DOI&subagency=USFWS',
        ],
      ],
      'fed_an_ua_tag',
    ];
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Function fws_gov_page_attachments_alter(array &$page) {
 * // Tell IE to use latest rendering engine (not to use compatibility mode).
 * // $ie_edge = [
 * //   '#type' => 'html_tag',
 * //   '#tag' => 'meta',
 * //   '#attributes' => [
 * //   'http-equiv' => 'X-UA-Compatible',
 * //   'content' => 'IE=edge',
 * //   ],
 * // ];
 * // $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];
}*/

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function fws_gov_preprocess_page(array &$variables) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'fws_gov/home';
  }
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }
    if (in_array($node->bundle(), [
      'one_column_page',
      'species',
    ])) {
      $variables['page']['fluid_main'] = TRUE;

    }
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    if ($alias === '/news' || $alias == '/library/collections' || $alias == '/search' || $alias == '/document-search'
        || $alias == '/our-facilities' || $alias == "/about/leadership"
        || $alias == '/policy-library/search' || $alias == '/policy-library/memarchived'
        || $alias == '/jobs'    || $alias == '/about/programs' || $alias == "/about/staff" || $alias == "/about/staff/search"
        || $alias == "/about/mission-and-vision" || $alias == "/about/regions"
        || $alias == "/education-programs" || $alias == "/events" || $alias == "/library/categories"
        || $alias == "/inads" || $alias == "/press-release" || $alias == "/service/search"
        || $alias == "/media-contacts" || $alias == "/partner" || $alias == "/partner/search"
        || $alias == "/volunteer-opportunity" || $alias == "/volunteer-opportunity/search" || $alias == '/testimony'
        || $alias == '/stakeholder-engagement/search' || $alias == "/explore-taxonomic-tree" || $alias == "/species/search" || $alias == "/faqs"
        || $alias == '/training' || $alias == '/find-inad' || $alias == '/release-notes' || $alias == '/science/catalog') {
      $variables['page']['fluid_main'] = FALSE;
    }
    if ($alias === '/faqs') {
      $variables['#attached']['library'][] = 'fws_gov/faqs';
    }
  }
  elseif (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
    $term = Term::load($term_id);
    if ($term->vid->target_id == 'activity') {
      $variables['page']['fluid_main'] = TRUE;
      $variables['#attached']['library'][] = 'fws_gov/activity';
    }
  }
}

/**
 * Implements hook_preprocess_taxonomy_term() for taxonomy-term.html.twig.
 *
 *  This will add in some default classes about which view mode and what taxonomy type is is for stlying purposes.
 */
function fws_gov_preprocess_taxonomy_term(array &$variables) {
  $term = $variables['term'];
  $variables['attributes']['class'][] = 'taxonomy-term';
  $variables['attributes']['class'][] = $variables['view_mode'];
  $variables['attributes']['class'][] = $term->get('vid')->target_id;
}

/**
 * Implements hook_preprocess_paragraph()
 *
 * Used to supply the button text of the paragraph type of a theme function, so that the button that links to the selected
 * file can have custom text displayed as the text of the download button.
 */
function fws_gov_preprocess_paragraph__get_started_document(array &$variables) {

  $paragraph = $variables['paragraph'];
  $button_text = $paragraph->get('field_button_text')->value ?? 'Download';
  // Load the media object so we can get at the file.
  $media = Media::load($paragraph->get('field_document_ref_single')->target_id);
  // Gets just the file from the media.
  $file = File::load($media->get('field_media_file')->target_id);

  // This is a theme function we created in fws_core, works similar to the "file_link" theme function
  // if you supply a description, that will be used as the link text.
  $variables['downloadable_link'] = [
    '#theme' => 'fws_core_download_link',
    '#file' => $file,
    '#description' => $button_text,
    '#attributes' => [
      'class' => ['simple-btn', 'simple-btn-primary', 'simple-btn-download'],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function fws_gov_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Be very careful over-riding page templates to not duplicate
 * code that should be shared (e.g. header/footer, etc.)
 * function fws_gov_theme_suggestions_page_alter(array &$suggestions, array $variables) {
 * if ($node = \Drupal::routeMatch()->getParameter('node')) {
 * $content_type = $node->bundle();
 * $suggestions[] = 'page__'.$content_type;
 * }
}*/

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Function fws_gov_theme_suggestions_node_alter(array &$suggestions, array $variables) {
 * // $node = $variables['elements']['#node'];
 * // if ($variables['elements']['#view_mode'] == "full") {
 * // }
}*/

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 *
 * Function fws_gov_preprocess_block(array &$variables) {
}*/

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Function fws_gov_theme_suggestions_field_alter(array &$suggestions, array $variables) {
 * // $element = $variables['element'];
 * // $suggestions[] = 'field__' . $element['#view_mode'];
 * // $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
}*/

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Function fws_gov_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
 * // $element = $variables['element'];
 * // if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
 * //   $suggestions[] = 'fieldset__form_composite';
 * // }
}*/

/**
 * Implements hook_preprocess_node().
 *
 * Function fws_gov_preprocess_node(array &$variables) {
 * // Default to turning off byline/submitted.
 * //$variables['display_submitted'] = FALSE;
}*/

/**
 * Implements hook_theme_suggestions_views_view_alter().
 *
 * Function fws_gov_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
}*/

/**
 * Implements hook_preprocess_form().
 *
 * Function fws_gov_preprocess_form(array &$variables) {
 * //$variables['attributes']['novalidate'] = 'novalidate';
}*/

/**
 * Implements hook_preprocess_select().
 *
 * Function fws_gov_preprocess_select(array &$variables) {
 * //$variables['attributes']['class'][] = 'select-chosen';
}*/

/**
 * Implements hook_preprocess_field().
 */
function fws_gov_preprocess_field(array &$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_mime_type':

      $counter = 0;
      foreach ($variables['items'] as $item) {
        $mime_type_values = _fws_gov_assign_mime_type_icon($item['content']['#context']['value']);
        $variables['items'][$counter]['content'] += $mime_type_values;
        $counter++;
      }
      break;
  }
}

/**
 *
 */
function _fws_gov_assign_mime_type_icon($mime_type) {
  $metadata = [];
  switch ($mime_type) {

    case 'application/pdf':
      $metadata['#mime_class'] = 'pdf';
      $metadata['#mime_label'] = 'PDF';
      break;

    case 'text/plain':
      $metadata['#mime_class'] = 'txt';
      $metadata['#mime_label'] = 'Text File';
      break;

    case 'application/msword':
    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
      $metadata['#mime_class'] = 'doc';
      $metadata['#mime_label'] = 'Word Document';
      break;

    case 'application/rtf':
      $metadata['#mime_class'] = 'rtf';
      $metadata['#mime_label'] = 'Rich Text File';
      break;

    case 'application/vnd.ms-powerpoint':
    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
      $metadata['#mime_class'] = 'ppt';
      $metadata['#mime_label'] = 'Powerpoint Presentation';
      break;

    case 'application/vnd.ms-excel':
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
      $metadata['#mime_class'] = 'xls';
      $metadata['#mime_label'] = 'Excel Document';
      break;

    case 'application/zip':
      $metadata['#mime_class'] = 'zip';
      $metadata['#mime_label'] = 'Zip Archive';
      break;

    case 'image/x-citrix-jpeg':
    case 'image/jpeg':
      $metadata['#mime_class'] = 'jpg';
      $metadata['#mime_label'] = 'Image';
      break;

    case 'image/gif':
      $metadata['#mime_class'] = 'gif';
      $metadata['#mime_label'] = 'Image';
      break;

    case 'image/png':
    case 'image/x-citrix-png':
    case 'image/x-png':
      $metadata['#mime_class'] = 'png';
      $metadata['#mime_label'] = 'Image';
      break;

    case 'image/vnd.adobe.photoshop';
      $metadata['#mime_class'] = 'psd';
      $metadata['#mime_label'] = 'Photoshop Document';
      break;

    case 'image/svg+xml':
      $metadata['#mime_class'] = 'svg';
      $metadata['#mime_label'] = 'Image';
      break;

    default:
      $metadata['#mime_class'] = 'generic';
      $metadata['#mime_label'] = 'Document';
      break;
  }

  return $metadata;
}

/**
 * Implements hook_preprocess_details().
 *
 * Function fws_gov_preprocess_details(array &$variables) {
 * // $variables['attributes']['class'][] = 'details';
 * // $variables['summary_attributes']['class'] = 'summary';
}*/

/**
 * Implements hook_theme_suggestions_details_alter().
 *
 * Function fws_gov_theme_suggestions_details_alter(array &$suggestions, array $variables) {
}*/

/**
 * Implements hook_preprocess_menu_local_task().
 *
 * Function fws_gov_preprocess_menu_local_task(array &$variables) {
 * //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}*/

/**
 * Implements hook_preprocess_HOOK().
 */
function fws_gov_preprocess_layout__onecol__species_characteristics(array &$variables) {
  // Creates an array of block labels (only for those blocks that are going
  // to be rendered - so, content exists) to use for custom tabs in a
  // layout--onecol--species-characteristics.html.twig.
  if (isset($variables["content"]["content"]) && !empty($variables["content"]["content"])) {
    $blocks = &$variables["content"]["content"];
    $block_labels = [];
    foreach ($blocks as &$block) {
      if (is_array($block) && isset($block["#configuration"]["label"])) {

        // We also need to set IDs for blocks itself - so it's possible to tie
        // custom tabs with those blocks.
        // Prepare IDs in 2 steps:
        // 1) transform to lowercase.
        // 2) replace spaces with dashes.
        // 3) remove special characters.
        $block_id = strtolower($block["#configuration"]["label"]);
        $block_id = 'characteristics-' . str_replace(' ', '-', $block_id);
        $block_id = preg_replace('/[^A-Za-z0-9\-]/', '', $block_id);

        // Set block ID.
        $block['#attributes']['id'] = $block_id;

        // Block ID + block label. Going to be used for custom tabs.
        $block_labels[$block_id] = $block["#configuration"]["label"];
      }
    }

    // Pass labels here.
    $variables['content']['tab_names'] = $block_labels;
  }
}

/**
 * Implements hook_preprocess_views_view_fullcalendar().
 *
 * @param $variables
 */
function fws_gov_preprocess_views_view_fullcalendar(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */

  $view = $variables["view"];
  if ($view->id() == 'program_events_calendar_view_list_view' && $view->current_display == 'attachment_calendar_view_event_list') {
    $calendar = $variables["#attached"]["drupalSettings"]["fullCalendarView"];
    foreach ($calendar as $key => $value) {
      $variables["#attached"]["drupalSettings"]["fullCalendarView"][$key]['title'] = $value["description"];
      $variables["#attached"]["drupalSettings"]["fullCalendarView"][$key]['description'] = '';
    }
  }
}

/**
 *
 */
function fws_gov_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  $display = $view->getDisplay();
  $id = $display->display['id'];
  if ($id === 'taxonomy_block') {
    $term = \Drupal::request()->attributes->get('taxonomy_term');
    $view->setTitle($term->getName() . ' Services');
  }

}

/**
 *
 */
function fws_gov_preprocess_mimemail_message(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  $base_path = str_replace('/' . $language, '', Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString());
  $variables['mail_css'] = $base_path . 'themes/custom/fws_gov/styles/css/mail.css';
}
