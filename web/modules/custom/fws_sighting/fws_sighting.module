<?php

/**
 * @file
 * Primary module hooks for FWS Sighting module.
 */

use Drupal\node\NodeInterface;
use GuzzleHttp\Exception\GuzzleException;
use Drupal\taxonomy\Entity\Term;

/**
 * Get state/province from coordinates using Nominatim API.
 *
 * @param float $lat
 *   The latitude.
 * @param float $lng
 *   The longitude.
 *
 * @return string
 *   The state/province code or empty string if not found.
 */
function _fws_sighting_get_state_from_coordinates($lat, $lng) {
  try {
    $client = \Drupal::httpClient();
    // Add a user agent as required by Nominatim's usage policy.
    $url = "https://nominatim.openstreetmap.org/reverse?format=json&lat={$lat}&lon={$lng}&zoom=5";
    $response = $client->get($url, [
      'headers' => [
        'User-Agent' => 'FWS-RAF-Project/1.0',
      ],
    ]);
    $data = json_decode($response->getBody(), TRUE);

    // Extract state/province from address data.
    if (!empty($data['address'])) {
      // Try different possible fields for state/province.
      $state = $data['address']['state'] ??
               $data['address']['province'] ??
               $data['address']['state_code'] ??
               $data['address']['province_code'] ?? '';

      // If we got a full name and it's in the US or Canada, try to convert to abbreviation.
      if (!empty($state)) {
        // Common US state mappings.
        $us_states = [
          'Alabama' => 'AL',
          'Alaska' => 'AK',
          'Arizona' => 'AZ',
          'Arkansas' => 'AR',
          'California' => 'CA',
          'Colorado' => 'CO',
          'Connecticut' => 'CT',
          'Delaware' => 'DE',
          'Florida' => 'FL',
          'Georgia' => 'GA',
          'Hawaii' => 'HI',
          'Idaho' => 'ID',
          'Illinois' => 'IL',
          'Indiana' => 'IN',
          'Iowa' => 'IA',
          'Kansas' => 'KS',
          'Kentucky' => 'KY',
          'Louisiana' => 'LA',
          'Maine' => 'ME',
          'Maryland' => 'MD',
          'Massachusetts' => 'MA',
          'Michigan' => 'MI',
          'Minnesota' => 'MN',
          'Mississippi' => 'MS',
          'Missouri' => 'MO',
          'Montana' => 'MT',
          'Nebraska' => 'NE',
          'Nevada' => 'NV',
          'New Hampshire' => 'NH',
          'New Jersey' => 'NJ',
          'New Mexico' => 'NM',
          'New York' => 'NY',
          'North Carolina' => 'NC',
          'North Dakota' => 'ND',
          'Ohio' => 'OH',
          'Oklahoma' => 'OK',
          'Oregon' => 'OR',
          'Pennsylvania' => 'PA',
          'Rhode Island' => 'RI',
          'South Carolina' => 'SC',
          'South Dakota' => 'SD',
          'Tennessee' => 'TN',
          'Texas' => 'TX',
          'Utah' => 'UT',
          'Vermont' => 'VT',
          'Virginia' => 'VA',
          'Washington' => 'WA',
          'West Virginia' => 'WV',
          'Wisconsin' => 'WI',
          'Wyoming' => 'WY',
        ];

        // Canadian province mappings.
        $ca_provinces = [
          'Alberta' => 'AB',
          'British Columbia' => 'BC',
          'Manitoba' => 'MB',
          'New Brunswick' => 'NB',
          'Newfoundland and Labrador' => 'NL',
          'Nova Scotia' => 'NS',
          'Ontario' => 'ON',
          'Prince Edward Island' => 'PE',
          'Quebec' => 'QC',
          'Saskatchewan' => 'SK',
          'Northwest Territories' => 'NT',
          'Nunavut' => 'NU',
          'Yukon' => 'YT',
        ];

        // Check if we have a mapping for this state/province.
        $state = $us_states[$state] ?? $ca_provinces[$state] ?? $state;
      }

      return $state;
    }
  }
  catch (GuzzleException $e) {
    \Drupal::logger('fws_sighting')->error('Error fetching state from coordinates: @error', ['@error' => $e->getMessage()]);
    return '';
  }

  return '';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function fws_sighting_node_presave(NodeInterface $node) {
  // Only act on sighting nodes.
  if ($node->bundle() !== 'sighting') {
    return;
  }

  // Check if auto state lookup is enabled.
  $config = \Drupal::config('fws_sighting.settings');
  if (!$config->get('auto_state_lookup')) {
    return;
  }

  // Only proceed if we have location data.
  if ($node->field_location->isEmpty()) {
    $node->field_state = NULL;
    return;
  }

  $lat = $node->field_location->lat;
  $lng = $node->field_location->lng;

  // Get state from coordinates.
  $state = _fws_sighting_get_state_from_coordinates($lat, $lng);
  $node->field_state = $state ?: NULL;

  // Update field_year based on field_date_time.
  if (!$node->field_date_time->isEmpty()) {
    $date_value = $node->field_date_time->value;
    $year = date('Y', strtotime($date_value));

    // Look for existing taxonomy term for this year.
    $term_id = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', 'year')
      ->condition('name', $year)
      ->accessCheck(FALSE)
      ->execute();

    if (empty($term_id)) {
      // Create new term if it doesn't exist.
      $term = Term::create([
        'name' => $year,
        'vid' => 'year',
      ]);
      $term->save();
      $term_id = $term->id();
    }
    else {
      $term_id = reset($term_id);
    }

    $node->set('field_year', ['target_id' => $term_id]);
  }
  else {
    $node->field_year = NULL;
  }
}

/**
 * Implements hook_page_attachments().
 */
function fws_sighting_page_attachments(array &$attachments) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Check both the system path and the alias.
  if ($current_path === '/observations-map' || $path_alias === '/observations-map' ||
      strpos($current_path, '/observations-map') === 0 || strpos($path_alias, '/observations-map') === 0) {
    \Drupal::logger('fws_sighting')->notice('Attaching sighting-count library on path: @path', ['@path' => $current_path]);
    $attachments['#attached']['library'][] = 'fws_sighting/sighting-count';
  }
}

/**
 * Implements hook_theme().
 */
function fws_sighting_theme() {
  return [
    'fws_sighting_count' => [
      'template' => 'fws-sighting-count',
      'variables' => [],
    ],
  ];
}
