<?php

/**
 * @file
 * Contains fws_goose.module.
 */

use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function fws_goose_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Handle the name node form separately.
  if ($form_id === 'node_name_form' || $form_id === 'node_name_edit_form') {
    // Always make the permit number field disabled.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }
  }

  if ($form_id === 'node_location_form' || $form_id === 'node_location_edit_form') {
    // Make permit number read-only.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }

    // Add the validate button after the access key field.
    $form['field_ca_access_key']['validate_ca'] = [
      '#type' => 'submit',
      '#value' => t('Validate Access'),
      '#name' => 'validate_ca_access',
      '#validate' => ['_fws_goose_validate_ca_access'],
      '#submit' => ['_fws_goose_validate_ca_access_submit'],
      '#limit_validation_errors' => [['field_ca_access_key']],
      '#weight' => 10,
    ];

    // Get the validated county from form state if it exists.
    $validated_county = $form_state->get('ca_validated_county');

    // If we have a validated county, convert state to read-only text field and set to California.
    if ($validated_county) {
      // Store the original state value for form processing.
      $form['field_location_state_ref']['widget']['#validated_state'] = 'CA';

      // Change the state field to a read-only text field.
      $form['field_location_state_ref']['widget']['#type'] = 'textfield';
      $form['field_location_state_ref']['widget']['#value'] = 'California';
      $form['field_location_state_ref']['widget']['#attributes']['readonly'] = TRUE;
      $form['field_location_state_ref']['widget']['#size'] = 60;

      // Add a hidden field to store the actual state reference value.
      $state_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'states',
        'name' => 'CA',
      ]);
      $state_term = reset($state_terms);
      if ($state_term) {
        $form['field_location_state_ref']['widget']['#default_value'] = $state_term->id();
      }
    }
    else {
      // Add state change handler to clear county when switching to CA.
      $form['field_location_state_ref']['widget']['#ajax'] = [
        '#type' => 'select',
        '#event' => 'change',
        '#callback' => '_fws_goose_state_changed',
        '#wrapper' => 'location-county-wrapper',
      ];
    }

    // Wrap county field for AJAX updates.
    $form['field_location_county']['#prefix'] = '<div id="location-county-wrapper">';
    $form['field_location_county']['#suffix'] = '</div>';

    // Get current state value.
    $state_value = NULL;
    $state_values = $form_state->getValue('field_location_state_ref');
    if (!empty($state_values[0]['target_id'])) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
      if ($term) {
        $state_value = $term->getName();
      }
    }
    // Also check for validated state.
    elseif (isset($form['field_location_state_ref']['widget']['#validated_state'])) {
      $state_value = $form['field_location_state_ref']['widget']['#validated_state'];
    }

    // If state is California, make county read-only and clear it if not from dropdown.
    if ($state_value === 'CA') {
      $form['field_location_county']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // If we have a validated county, set it in both fields.
      if ($validated_county) {
        $form['field_location_county']['widget'][0]['value']['#value'] = $validated_county;

        // Find and select the matching county in the dropdown.
        if (isset($form['field_ca_county_select']['widget']['#options'])) {
          foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
            if ($tid === '_none') {
              continue;
            }
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
            if ($term && $term->getName() === $validated_county) {
              $form['field_ca_county_select']['widget']['#default_value'] = $tid;
              break;
            }
          }
        }
      }
      else {
        // Clear the county field if no validated county.
        $form['field_location_county']['widget'][0]['value']['#value'] = '';
      }
    }

    // If we have a validated county, only enable selection of that county.
    if ($validated_county && isset($form['field_ca_county_select']['widget']['#options'])) {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if ($term) {
          $county_name = $term->getName();
          // Disable all counties except the validated one.
          if ($county_name !== $validated_county) {
            $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
            $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
          }
        }
      }
    }
    // If no county is validated yet, disable all counties.
    else {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid !== '_none') {
          $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
          $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
        }
      }
    }

    if (isset($form['field_ca_county_select']['widget']['#options'])) {
      $entity_type_manager = \Drupal::entityTypeManager();
      $term_storage = $entity_type_manager->getStorage('taxonomy_term');

      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = $term_storage->load($tid);
        if ($term && $term->hasField('field_iscountyrestricted')) {
          $is_restricted = $term->get('field_iscountyrestricted')->value;
          if ($is_restricted === 'Y') {
            // Only append [Restricted] if we haven't already appended [Access Code Required].
            if (strpos($form['field_ca_county_select']['widget']['#options'][$tid], '[Access Code Required]') === FALSE) {
              $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Restricted]';
            }
          }
        }
      }
    }

    // Add handler for CA county select changes.
    $form['field_ca_county_select']['widget']['#ajax'] = [
      '#type' => 'select',
      '#event' => 'change',
      '#callback' => '_fws_goose_ca_county_changed',
      '#wrapper' => 'location-county-wrapper',
    ];
  }
}

/**
 * AJAX callback for state changes.
 */
function _fws_goose_state_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected state.
  $state_values = $form_state->getValue('field_location_state_ref');
  if (!empty($state_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
    if ($term && $term->getName() === 'CA') {
      // Clear the county field when switching to CA.
      $form['field_location_county']['widget'][0]['value']['#value'] = '';
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        ['']
      ));
    }
  }

  return $response;
}

/**
 * AJAX callback for CA county select changes.
 */
function _fws_goose_ca_county_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected county.
  $county_values = $form_state->getValue('field_ca_county_select');
  if (!empty($county_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($county_values[0]['target_id']);
    if ($term) {
      // Update the county field with the selected county name.
      $county_name = $term->getName();
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        [$county_name]
      ));
    }
  }

  return $response;
}

/**
 * Validation function for the CA access key field.
 */
function _fws_goose_validate_ca_access($form, FormStateInterface $form_state) {
  $access_key = $form_state->getValue('field_ca_access_key')[0]['value'];
  if (empty($access_key)) {
    $form_state->setErrorByName('field_ca_access_key', t('Please enter an access key.'));
    return;
  }

  // Look up the access key in taxonomy.
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // First try exact match on name.
  $query = $term_storage->getQuery()
    ->condition('vid', 'california_access_key')
    ->condition('name', $access_key)
    ->accessCheck(FALSE)
    ->range(0, 1);
  $tids = $query->execute();

  if (empty($tids)) {
    $form_state->setErrorByName('field_ca_access_key', t('Invalid access key. Please try again or contact support.'));
    return;
  }

  // Get the county name from the term.
  $tid = reset($tids);
  $term = $term_storage->load($tid);
  if (!$term) {
    $form_state->setErrorByName('field_ca_access_key', t('Error loading county information. Please try again.'));
    return;
  }

  // Save the county name in form state - county name is already in the term name.
  $county_name = $term->getName();
  $form_state->set('ca_validated_county', $county_name);
  $form_state->set('ca_validated_county_tid', $tid);
}

/**
 * Submit handler for the CA access key validation.
 */
function _fws_goose_validate_ca_access_submit($form, FormStateInterface $form_state) {
  // Get the validated county from form state.
  $validated_county = $form_state->get('ca_validated_county');
  $validated_county_tid = $form_state->get('ca_validated_county_tid');

  if ($validated_county && $validated_county_tid) {
    \Drupal::messenger()->addStatus(t('Access code validated for @county County.', ['@county' => $validated_county]));
  }

  // Rebuild the form to show the validated county.
  $form_state->setRebuild(TRUE);
}

/**
 * Implements hook_entity_presave().
 */
function fws_goose_entity_presave($entity) {
  // Only process new location nodes.
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'location' || !$entity->isNew()) {
    return;
  }

  // Skip permit number generation if already set.
  if (!$entity->get('field_permit_no')->isEmpty()) {
    return;
  }

  // Get or initialize the permit number counter from configuration.
  $config = \Drupal::configFactory()->getEditable('fws_goose.settings');
  $next_number = $config->get('permit_number_counter');
  if ($next_number === NULL) {
    // Initialize with 1 if no counter exists.
    $next_number = 1;
  }
  else {
    $next_number++;
  }

  // Format the permit number (5 digits + 'A').
  $permit_number = sprintf('%05dA', $next_number);

  // Double check for duplicates.
  $duplicate_check = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->condition('type', 'location')
    ->condition('field_permit_no', $permit_number)
    ->accessCheck(FALSE)
    ->count()
    ->execute();

  if ($duplicate_check > 0) {
    \Drupal::logger('fws_goose')->error('Duplicate permit number detected: @permit', ['@permit' => $permit_number]);
    return;
  }

  // Save the new counter value.
  $config->set('permit_number_counter', $next_number)
    ->save(TRUE);

  // Set the permit number on the entity.
  $entity->set('field_permit_no', $permit_number);

  // Also save the permit number to the user profile.
  $current_user = \Drupal::currentUser();
  if ($current_user->id() > 0) {
    $user = User::load($current_user->id());
    if ($user && $user->hasField('field_permit_no') && $user->get('field_permit_no')->isEmpty()) {
      $user->set('field_permit_no', $permit_number);
      $user->save();
      \Drupal::logger('fws_goose')->notice('Saved permit number @permit to user @uid', [
        '@permit' => $permit_number,
        '@uid' => $current_user->id(),
      ]);
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function fws_goose_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('name', 'Drupal\fws_goose\Form\NameNodeForm');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function fws_goose_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();

  // Check if we're on the add name form page.
  if ($current_path == '/node/add/name') {
    // Check if the current user has a permit number.
    $current_user = \Drupal::currentUser();
    if ($current_user->id() > 0) {
      $user = User::load($current_user->id());

      // If user has no permit number, redirect to location form.
      if (!$user || !$user->hasField('field_permit_no') || $user->get('field_permit_no')->isEmpty()) {
        // Set a message explaining why they're being redirected.
        \Drupal::messenger()->addWarning(t('You must create a location with a permit number before adding a name. Please complete this form first.'));

        // Redirect to the location add form.
        $url = Url::fromUri('internal:/node/add/location')->toString();
        $response = new RedirectResponse($url);
        $response->send();
        exit;
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function fws_goose_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // For title display on user pages.
  if ($route_name == 'entity.user.canonical') {
    $variables['title'] = t('View Registration Form');
  }
}

/**
 * Implements hook_preprocess_user().
 */
function fws_goose_preprocess_user(&$variables) {
  // Get the user entity from the variables.
  $user = $variables['user'];

  // Only proceed if we have a valid user ID.
  if ($user && $user->id()) {
    // Load location nodes for this user.
    $location_nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => 'location',
        'uid' => $user->id(),
        'status' => 1,
      ]);
    $variables['locations'] = $location_nodes;

    // Load agent/name nodes for this user.
    $agent_nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => 'name',
        'uid' => $user->id(),
        'status' => 1,
      ]);
    $variables['agents'] = $agent_nodes;
  }
  else {
    // Initialize empty arrays if no user.
    $variables['locations'] = [];
    $variables['agents'] = [];
  }
}

/**
 * Sends an email notification about certified user account.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The user entity.
 */
function fws_goose_send_certification_notification(EntityInterface $entity) {
  // Initialize the logger.
  $logger = \Drupal::logger('fws_goose');
  $logger->notice('Starting certification notification process for entity ID: @id', ['@id' => $entity->id()]);

  // Check if this is actually a user entity.
  if ($entity->getEntityTypeId() !== 'user') {
    $logger->warning('Attempted to send certification notification for non-user entity: @type, ID: @id', [
      '@type' => $entity->getEntityTypeId(),
      '@id' => $entity->id(),
    ]);
    return;
  }

  // Get the user's email address.
  $user_email = $entity->getEmail();
  if (empty($user_email)) {
    $logger->error('Cannot send certification email - user has no email address (ID: @id)', [
      '@id' => $entity->id(),
    ]);
    return;
  }

  $logger->info('Processing certification notification for user: @name (ID: @id, Email: @email)', [
    '@name' => $entity->getAccountName(),
    '@id' => $entity->id(),
    '@email' => $user_email,
  ]);

  // Prepare the notification data.
  $notification_data = [
    'username' => $entity->getAccountName(),
    'email' => $user_email,
    'operation' => 'certified',
    'url' => Url::fromRoute('entity.user.canonical', ['user' => $entity->id()], ['absolute' => TRUE])->toString(),
    'user_id' => $entity->id(),
  ];

  // Add any additional user fields that might be relevant.
  if ($entity->hasField('field_permit_no') && !$entity->get('field_permit_no')->isEmpty()) {
    $notification_data['permit_number'] = $entity->get('field_permit_no')->value;
    $logger->info('User has permit number: @permit', ['@permit' => $notification_data['permit_number']]);
  }
  else {
    $logger->info('No permit number available for this user.');
  }

  if ($entity->hasField('field_applicant_business_name') && !$entity->get('field_applicant_business_name')->isEmpty()) {
    $notification_data['business_name'] = $entity->get('field_applicant_business_name')->value;
    $logger->info('User has business name: @business', ['@business' => $notification_data['business_name']]);
  }
  else {
    $logger->info('No business name available for this user.');
  }

  // Log the complete notification data.
  $logger->debug('Notification data: @data', ['@data' => print_r($notification_data, TRUE)]);

  $logger->info('Sending certification confirmation to user email: @email', ['@email' => $user_email]);

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'fws_goose';

  $logger->info('About to send mail via @module module using key "certified"', ['@module' => $module]);
  $result = $mailManager->mail($module, 'certified', $user_email, $language, $notification_data, NULL, TRUE);

  if ($result['result'] !== TRUE) {
    $logger->error('Error sending certification confirmation email. Mail system reported: @error', [
      '@error' => $result['error'] ?? 'Unknown error',
    ]);
  }
  else {
    $logger->info('Successfully sent certification confirmation email to user.');
  }

  // Also send notification to administrators if configured.
  $config = \Drupal::config('fws_notifications.settings');
  $admin_emails = $config->get('notification_emails');

  if (!empty($admin_emails)) {
    $emails_string = implode(', ', $admin_emails);
    $logger->info('Also sending admin notification to: @emails', ['@emails' => $emails_string]);

    $result = $mailManager->mail($module, 'certified_admin', implode(',', $admin_emails), $language, $notification_data, NULL, TRUE);

    if ($result['result'] !== TRUE) {
      $logger->error('Error sending admin notification email. Mail system reported: @error', [
        '@error' => $result['error'] ?? 'Unknown error',
      ]);
    }
    else {
      $logger->info('Successfully sent admin notification email.');
    }
  }

  $logger->notice('Completed certification notification process for user: @name (ID: @id)', [
    '@name' => $entity->getAccountName(),
    '@id' => $entity->id(),
  ]);
}

/**
 * Implements hook_mail().
 */
function fws_goose_mail($key, &$message, $params) {
  switch ($key) {
    case 'certified':
      // Email to the user who certified.
      $message['subject'] = t('Canada Goose Registration Confirmation');

      // Get the user entity to access more fields.
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($params['user_id']);

      // Create the email body in the same format as the example.
      $body = [];
      $body[] = t('This is confirmation that your registration has been received.');
      $body[] = '';

      // Track content sections to avoid empty sections.
      $has_permit_info = FALSE;
      $has_registrant_info = FALSE;
      $has_address_info = FALSE;
      $has_locations = FALSE;
      $has_agents = FALSE;

      // Permit/registration information.
      if (!empty($params['permit_number'])) {
        $body[] = t('Registration No. @permit', ['@permit' => $params['permit_number']]);
        $has_permit_info = TRUE;
      }

      // Date information.
      $body[] = t('Date of Registration: @date', ['@date' => \Drupal::service('date.formatter')->format(time(), 'custom', 'n/j/Y')]);

      // Date of Amendment - only if different than registration date.
      // This could be added if there's a field tracking amendment dates.
      // Registrant information.
      $registrant_name = '';
      if ($user && $user->hasField('field_bi_cd') && !$user->get('field_bi_cd')->isEmpty() && $user->get('field_bi_cd')->value == 'B') {
        // Business registrant.
        if ($user->hasField('field_applicant_business_name') && !$user->get('field_applicant_business_name')->isEmpty()) {
          $registrant_name = trim($user->get('field_applicant_business_name')->value);
          if (!empty($registrant_name)) {
            $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
            $has_registrant_info = TRUE;
          }

          // Add contact person if available.
          if ($user->hasField('field_applicant_last_name') && !$user->get('field_applicant_last_name')->isEmpty()) {
            $last_name = trim($user->get('field_applicant_last_name')->value);
            $first_name = '';
            if ($user->hasField('field_applicant_first_name') && !$user->get('field_applicant_first_name')->isEmpty()) {
              $first_name = trim($user->get('field_applicant_first_name')->value);
            }

            $contact_name = trim("$last_name, $first_name");
            if (!empty($contact_name)) {
              $body[] = t('Business Contact Person: @name', ['@name' => $contact_name]);
              $has_registrant_info = TRUE;
            }
          }

          // Additional business information section.
          $has_business_info = FALSE;
          $business_fields = [];

          // Primary Contact Information.
          if ($user->hasField('field_primary_contact_name') && !$user->get('field_primary_contact_name')->isEmpty()) {
            $business_fields[] = t('Primary Contact Name: @name', ['@name' => trim($user->get('field_primary_contact_name')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_phone') && !$user->get('field_primary_contact_phone')->isEmpty()) {
            $business_fields[] = t('Primary Contact Phone: @phone', ['@phone' => trim($user->get('field_primary_contact_phone')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_email') && !$user->get('field_primary_contact_email')->isEmpty()) {
            $business_fields[] = t('Primary Contact Email: @email', ['@email' => trim($user->get('field_primary_contact_email')->value)]);
            $has_business_info = TRUE;
          }

          // Principal Information.
          $principal_name = '';
          if ($user->hasField('field_principal_last_name') && !$user->get('field_principal_last_name')->isEmpty()) {
            $principal_last_name = trim($user->get('field_principal_last_name')->value);
            $principal_first_name = '';
            if ($user->hasField('field_principal_first_name') && !$user->get('field_principal_first_name')->isEmpty()) {
              $principal_first_name = trim($user->get('field_principal_first_name')->value);
            }

            $principal_middle_name = '';
            if ($user->hasField('field_principal_middle_name') && !$user->get('field_principal_middle_name')->isEmpty()) {
              $principal_middle_name = trim($user->get('field_principal_middle_name')->value);
            }

            $principal_suffix = '';
            if ($user->hasField('field_principal_suffix') && !$user->get('field_principal_suffix')->isEmpty()) {
              $principal_suffix = trim($user->get('field_principal_suffix')->value);
            }

            $principal_name_parts = [];
            if (!empty($principal_last_name)) {
              $principal_name_parts[] = $principal_last_name;
            }

            if (!empty($principal_first_name)) {
              $principal_name_parts[] = $principal_first_name;
            }

            if (!empty($principal_middle_name)) {
              $principal_name_parts[] = $principal_middle_name;
            }

            if (!empty($principal_suffix)) {
              $principal_name_parts[] = $principal_suffix;
            }

            if (!empty($principal_name_parts)) {
              $principal_name = implode(', ', $principal_name_parts);
              $business_fields[] = t('Principal Name: @name', ['@name' => $principal_name]);
              $has_business_info = TRUE;
            }
          }

          if ($user->hasField('field_principal_title') && !$user->get('field_principal_title')->isEmpty()) {
            $business_fields[] = t('Principal Title: @title', ['@title' => trim($user->get('field_principal_title')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_telephone') && !$user->get('field_principal_telephone')->isEmpty()) {
            $business_fields[] = t('Principal Telephone: @phone', ['@phone' => trim($user->get('field_principal_telephone')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_email') && !$user->get('field_principal_email')->isEmpty()) {
            $business_fields[] = t('Principal Email: @email', ['@email' => trim($user->get('field_principal_email')->value)]);
            $has_business_info = TRUE;
          }

          // Add the business information section if we have any business fields.
          if ($has_business_info) {
            $body[] = '';
            $body[] = t('Additional Business Information:');
            $body[] = '';

            foreach ($business_fields as $field) {
              $body[] = $field;
            }

            $body[] = '';
          }
        }
      }
      elseif ($user && $user->hasField('field_applicant_last_name') && !$user->get('field_applicant_last_name')->isEmpty()) {
        // Individual registrant.
        $last_name = $user->get('field_applicant_last_name')->value;
        $first_name = '';
        if ($user->hasField('field_applicant_first_name') && !$user->get('field_applicant_first_name')->isEmpty()) {
          $first_name = $user->get('field_applicant_first_name')->value;
        }

        $registrant_name = trim("$last_name, $first_name");
        if (!empty($registrant_name)) {
          $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
          $has_registrant_info = TRUE;
        }
      }
      elseif (!empty($params['business_name'])) {
        $registrant_name = $params['business_name'];
        $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
        $has_registrant_info = TRUE;
      }
      elseif (!empty($params['username'])) {
        $registrant_name = $params['username'];
        $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
        $has_registrant_info = TRUE;
      }

      // Registrant type.
      if ($user && $user->hasField('field_registrant_type_cd') && !$user->get('field_registrant_type_cd')->isEmpty()) {
        $reg_type = $user->get('field_registrant_type_cd')->value;
        if (!empty($reg_type)) {
          $body[] = t('Registrant Type: @type', ['@type' => $reg_type]);
          $has_registrant_info = TRUE;
        }
      }
      elseif ($user && $user->hasField('field_bi_cd') && !$user->get('field_bi_cd')->isEmpty()) {
        $bi_type = $user->get('field_bi_cd')->value;
        $reg_type = ($bi_type == 'B') ? t('Business') : t('Individual');
        $body[] = t('Registrant Type: @type', ['@type' => $reg_type]);

        if ($bi_type == 'B' && $user->hasField('field_applicant_business_name') &&
            !$user->get('field_applicant_business_name')->isEmpty()) {
          $business_name = trim($user->get('field_applicant_business_name')->value);
          $body[] = t('Business name: @business', ['@business' => $business_name]);

          // Business Contact Person.
          if ($user->hasField('field_applicant_last_name') && !$user->get('field_applicant_last_name')->isEmpty()) {
            $last_name = trim($user->get('field_applicant_last_name')->value);
            $first_name = '';
            if ($user->hasField('field_applicant_first_name') && !$user->get('field_applicant_first_name')->isEmpty()) {
              $first_name = trim($user->get('field_applicant_first_name')->value);
            }

            $contact_name = trim("$last_name, $first_name");
            if (!empty($contact_name)) {
              $body[] = t('Business Contact Person: @name', ['@name' => $contact_name]);
            }
          }

          // Additional business details.
          $has_business_info = FALSE;

          // Primary Contact Information.
          if ($user->hasField('field_primary_contact_name') && !$user->get('field_primary_contact_name')->isEmpty()) {
            $body[] = t('Primary Contact Name: @name', ['@name' => trim($user->get('field_primary_contact_name')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_phone') && !$user->get('field_primary_contact_phone')->isEmpty()) {
            $body[] = t('Primary Contact Phone: @phone', ['@phone' => trim($user->get('field_primary_contact_phone')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_email') && !$user->get('field_primary_contact_email')->isEmpty()) {
            $body[] = t('Primary Contact Email: @email', ['@email' => trim($user->get('field_primary_contact_email')->value)]);
            $has_business_info = TRUE;
          }

          // Principal Information.
          if ($user->hasField('field_principal_last_name') && !$user->get('field_principal_last_name')->isEmpty()) {
            $principal_name_parts = [];
            $principal_last_name = trim($user->get('field_principal_last_name')->value);
            $principal_name_parts[] = $principal_last_name;

            if ($user->hasField('field_principal_first_name') && !$user->get('field_principal_first_name')->isEmpty()) {
              $principal_name_parts[] = trim($user->get('field_principal_first_name')->value);
            }

            $principal_name = implode(', ', $principal_name_parts);
            $body[] = t('Principal Name: @name', ['@name' => $principal_name]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_title') && !$user->get('field_principal_title')->isEmpty()) {
            $body[] = t('Principal Title: @title', ['@title' => trim($user->get('field_principal_title')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_telephone') && !$user->get('field_principal_telephone')->isEmpty()) {
            $body[] = t('Principal Telephone: @phone', ['@phone' => trim($user->get('field_principal_telephone')->value)]);
            $has_business_info = TRUE;
          }
        }
      }

      // Only add spacing if we actually have registrant info.
      if ($has_permit_info || $has_registrant_info) {
        $body[] = '';
      }

      // Address section - only add if we have address information.
      $address_lines = [];
      if ($user && $user->hasField('field_applicant_address_l1') && !$user->get('field_applicant_address_l1')->isEmpty()) {
        $line = trim($user->get('field_applicant_address_l1')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }

      if ($user && $user->hasField('field_applicant_address_l2') && !$user->get('field_applicant_address_l2')->isEmpty()) {
        $line = trim($user->get('field_applicant_address_l2')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }

      if ($user && $user->hasField('field_applicant_address_l3') && !$user->get('field_applicant_address_l3')->isEmpty()) {
        $line = trim($user->get('field_applicant_address_l3')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }

      $city = '';
      if ($user && $user->hasField('field_applicant_city') && !$user->get('field_applicant_city')->isEmpty()) {
        $city = trim($user->get('field_applicant_city')->value);
        if (!empty($city)) {
          $has_address_info = TRUE;
        }
      }

      $county = '';
      if ($user && $user->hasField('field_applicant_county') && !$user->get('field_applicant_county')->isEmpty()) {
        $county = trim($user->get('field_applicant_county')->value);
        if (!empty($county)) {
          $has_address_info = TRUE;
        }
      }

      $state = '';
      if ($user && $user->hasField('field_applicant_state') && !$user->get('field_applicant_state')->isEmpty()) {
        $state = trim($user->get('field_applicant_state')->value);
        if (!empty($state)) {
          $has_address_info = TRUE;
        }
      }

      $zip = '';
      if ($user && $user->hasField('field_applicant_zip') && !$user->get('field_applicant_zip')->isEmpty()) {
        $zip = trim($user->get('field_applicant_zip')->value);
        if (!empty($zip)) {
          $has_address_info = TRUE;
        }
      }

      // Phone information.
      $phone = '';
      if ($user && $user->hasField('field_applicant_telephone') && !$user->get('field_applicant_telephone')->isEmpty()) {
        $phone = trim($user->get('field_applicant_telephone')->value);
        if (!empty($phone)) {
          $has_address_info = TRUE;
        }
      }
      elseif ($user && $user->hasField('field_phone') && !$user->get('field_phone')->isEmpty()) {
        $phone = trim($user->get('field_phone')->value);
        if (!empty($phone)) {
          $has_address_info = TRUE;
        }
      }

      // Only add the address section if we actually have address info.
      if ($has_address_info) {
        $body[] = t('Registrant Address and Contact Information:');
        $body[] = '';

        foreach ($address_lines as $line) {
          $body[] = $line;
        }

        if (!empty($county)) {
          $body[] = $county;
        }

        if (!empty($city) || !empty($state) || !empty($zip)) {
          $location_str = '';
          if (!empty($city)) {
            $location_str = $city;
          }

          if (!empty($state)) {
            if (!empty($location_str)) {
              $location_str .= ".  $state";
            }
            else {
              $location_str = $state;
            }
          }

          if (!empty($zip)) {
            if (!empty($location_str)) {
              $location_str .= "  $zip";
            }
            else {
              $location_str = $zip;
            }
          }

          if (!empty($location_str)) {
            $body[] = $location_str;
          }
        }

        if (!empty($phone)) {
          $body[] = '';
          $body[] = t('Telephone: @phone', ['@phone' => $phone]);
        }

        $body[] = '';
      }

      // Get locations for this user.
      if ($user) {
        $locations = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadByProperties([
            'type' => 'location',
            'uid' => $user->id(),
            'status' => 1,
          ]);

        if (!empty($locations)) {
          $location_lines = [];
          $count = 1;

          foreach ($locations as $location) {
            $location_address = [];

            if ($location->hasField('field_location_address') && !$location->get('field_location_address')->isEmpty()) {
              $address = trim($location->get('field_location_address')->value);
              if (!empty($address)) {
                $location_address[] = $address;
              }
            }

            $location_city = '';
            if ($location->hasField('field_location_city') && !$location->get('field_location_city')->isEmpty()) {
              $location_city = trim($location->get('field_location_city')->value);
            }

            $location_county = '';
            if ($location->hasField('field_location_county') && !$location->get('field_location_county')->isEmpty()) {
              $location_county = trim($location->get('field_location_county')->value);
            }

            $location_state = '';
            if ($location->hasField('field_location_state_ref') && !$location->get('field_location_state_ref')->isEmpty()) {
              $target_id = $location->get('field_location_state_ref')->target_id;
              $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($target_id);
              if ($term) {
                $location_state = trim($term->getName());
              }
            }

            $location_desc = '';
            if (empty($location_address)) {
              if ($location->hasField('field_location_description') && !$location->get('field_location_description')->isEmpty()) {
                $location_desc = trim($location->get('field_location_description')->value);
              }
            }

            // Only add this location if we have any content.
            if (!empty($location_county) || !empty($location_address) || !empty($location_desc) ||
                !empty($location_city) || !empty($location_state)) {

              $location_line = "   $count) ";
              if (!empty($location_county)) {
                $location_line .= "$location_county, ";
              }

              if (!empty($location_address)) {
                $location_line .= implode(', ', $location_address);
              }
              elseif (!empty($location_desc)) {
                $location_line .= $location_desc;
              }

              if (!empty($location_city) || !empty($location_state)) {
                $location_line .= ",  ";
                if (!empty($location_city)) {
                  $location_line .= $location_city;
                }
                if (!empty($location_state)) {
                  $location_line .= ",  $location_state";
                }
              }

              $location_lines[] = $location_line;
              $count++;
              $has_locations = TRUE;
            }
          }

          if ($has_locations) {
            $body[] = t('Location of Properties where Activity will occur:');
            $body[] = '';

            foreach ($location_lines as $line) {
              $body[] = $line;
            }

            $body[] = '';
          }
        }
      }

      // Get agents/employees for this user.
      if ($user) {
        $agents = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadByProperties([
            'type' => 'name',
            'uid' => $user->id(),
            'status' => 1,
          ]);

        if (!empty($agents)) {
          $agent_lines = [];
          $count = 1;

          foreach ($agents as $agent) {
            $agent_name = '';
            if ($agent->hasField('title') && !$agent->get('title')->isEmpty()) {
              $agent_name = trim($agent->get('title')->value);
            }

            $agent_organization = '';
            if ($agent->hasField('field_organization_name') && !$agent->get('field_organization_name')->isEmpty()) {
              $agent_organization = trim($agent->get('field_organization_name')->value);
            }

            // Only add this agent if we have any content.
            if (!empty($agent_name) || !empty($agent_organization)) {
              $agent_line = "   $count) ";

              if (!empty($agent_name)) {
                $agent_line .= $agent_name;
              }

              if (!empty($agent_organization)) {
                $agent_line .= " ($agent_organization)";
              }

              $agent_lines[] = $agent_line;
              $count++;
              $has_agents = TRUE;
            }
          }

          if ($has_agents) {
            $body[] = t('Agent/Employee:');
            $body[] = '';

            foreach ($agent_lines as $line) {
              $body[] = $line;
            }

            $body[] = '';
          }
        }
      }

      // Add the conditions and signature section.
      $body[] = t('Conditions: You and your agents or employees must comply with the Resident Canada Goose Nest & Egg Depredation Order Conditions.');
      $body[] = '';
      $body[] = t('If agents or employees will conduct the nest and egg work on your behalf, you may sign this registration confirmation and provide them a copy as evidence of your authorization to perform the work.');
      $body[] = '';
      $body[] = t('Signature of Registrant (Landowner):  ______________________________________________');

      // Set the message body.
      $message['body'] = $body;
      break;

    case 'certified_admin':
      // Notification to administrators.
      $message['subject'] = t('User account certified: @username', [
        '@username' => $params['username'],
      ]);

      $body = [];
      $body[] = t('A user account has been certified. View it here: @url', [
        '@url' => $params['url'],
      ]);
      $body[] = '';

      // Get the user entity to access more fields.
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($params['user_id']);

      $body[] = t('User: @username', ['@username' => $params['username']]);
      $body[] = t('Email: @email', ['@email' => $params['email']]);

      if ($user && $user->hasField('field_bi_cd') && !$user->get('field_bi_cd')->isEmpty()) {
        $bi_type = $user->get('field_bi_cd')->value;
        $reg_type = ($bi_type == 'B') ? t('Business') : t('Individual');
        $body[] = t('Registrant Type: @type', ['@type' => $reg_type]);

        if ($bi_type == 'B' && $user->hasField('field_applicant_business_name') &&
            !$user->get('field_applicant_business_name')->isEmpty()) {
          $business_name = trim($user->get('field_applicant_business_name')->value);
          $body[] = t('Business name: @business', ['@business' => $business_name]);

          // Business Contact Person.
          if ($user->hasField('field_applicant_last_name') && !$user->get('field_applicant_last_name')->isEmpty()) {
            $last_name = trim($user->get('field_applicant_last_name')->value);
            $first_name = '';
            if ($user->hasField('field_applicant_first_name') && !$user->get('field_applicant_first_name')->isEmpty()) {
              $first_name = trim($user->get('field_applicant_first_name')->value);
            }

            $contact_name = trim("$last_name, $first_name");
            if (!empty($contact_name)) {
              $body[] = t('Business Contact Person: @name', ['@name' => $contact_name]);
            }
          }

          // Additional business details.
          $has_business_info = FALSE;

          // Primary Contact Information.
          if ($user->hasField('field_primary_contact_name') && !$user->get('field_primary_contact_name')->isEmpty()) {
            $body[] = t('Primary Contact Name: @name', ['@name' => trim($user->get('field_primary_contact_name')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_phone') && !$user->get('field_primary_contact_phone')->isEmpty()) {
            $body[] = t('Primary Contact Phone: @phone', ['@phone' => trim($user->get('field_primary_contact_phone')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_primary_contact_email') && !$user->get('field_primary_contact_email')->isEmpty()) {
            $body[] = t('Primary Contact Email: @email', ['@email' => trim($user->get('field_primary_contact_email')->value)]);
            $has_business_info = TRUE;
          }

          // Principal Information.
          if ($user->hasField('field_principal_last_name') && !$user->get('field_principal_last_name')->isEmpty()) {
            $principal_name_parts = [];
            $principal_last_name = trim($user->get('field_principal_last_name')->value);
            $principal_name_parts[] = $principal_last_name;

            if ($user->hasField('field_principal_first_name') && !$user->get('field_principal_first_name')->isEmpty()) {
              $principal_name_parts[] = trim($user->get('field_principal_first_name')->value);
            }

            $principal_name = implode(', ', $principal_name_parts);
            $body[] = t('Principal Name: @name', ['@name' => $principal_name]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_title') && !$user->get('field_principal_title')->isEmpty()) {
            $body[] = t('Principal Title: @title', ['@title' => trim($user->get('field_principal_title')->value)]);
            $has_business_info = TRUE;
          }

          if ($user->hasField('field_principal_telephone') && !$user->get('field_principal_telephone')->isEmpty()) {
            $body[] = t('Principal Telephone: @phone', ['@phone' => trim($user->get('field_principal_telephone')->value)]);
            $has_business_info = TRUE;
          }
        }
      }

      if (!empty($params['permit_number'])) {
        $body[] = t('Permit number: @permit', ['@permit' => $params['permit_number']]);
      }

      $message['body'] = $body;
      break;
  }
}

/**
 * Determines if the current date is within the registration period.
 *
 * Registration can only occur from January 1st to end of June.
 *
 * @return bool
 *   TRUE if within registration period, FALSE otherwise.
 */
function fws_goose_is_registration_period() {
  $date = new \DateTime();
  $month = (int) $date->format('n');

  // Check if month is between January (1) and June (6) inclusive.
  return ($month >= 1 && $month <= 6);
}

/**
 * Determines if the current date is within the activity logging period.
 *
 * Activity can be logged only from January to end of October.
 *
 * @return bool
 *   TRUE if within activity logging period, FALSE otherwise.
 */
function fws_goose_is_activity_logging_period() {
  $date = new \DateTime();
  $month = (int) $date->format('n');

  // Check if month is between January (1) and October (10) inclusive.
  return ($month >= 1 && $month <= 10);
}

/**
 * Checks if a user's registration has expired due to missing activity reports.
 *
 * @param int $uid
 *   The user ID to check.
 *
 * @return bool
 *   TRUE if registration is expired, FALSE otherwise.
 */
function fws_goose_is_registration_expired($uid) {
  // Get user entity.
  $user = User::load($uid);
  if (!$user) {
    return TRUE;
  }

  // Get current year and previous year.
  $current_year = (int) date('Y');
  $previous_year = $current_year - 1;

  // Only check for expiration if we're in a new year.
  // This implements the "Check we are in next year" part of the logic.
  $current_month = (int) date('n');
  if ($current_month >= 1) {
    // Check if user has reported activity for previous year.
    // This would need to be adjusted based on how activity reports are stored.
    $activity_reported = \Drupal::database()->select('node_field_data', 'n')
      ->fields('n', ['nid'])
      ->condition('n.type', 'location', '=')
      ->condition('n.uid', $uid, '=')
      ->condition('n.created', [
        strtotime("$previous_year-01-01 00:00:00"),
        strtotime("$previous_year-12-31 23:59:59"),
      ], 'BETWEEN')
      ->countQuery()
      ->execute()
      ->fetchField();

    // If no activity was reported last year, registration is expired.
    if ($activity_reported == 0) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks if a user can register or renew registration.
 *
 * @param int $uid
 *   The user ID to check.
 *
 * @return array
 *   An array with keys:
 *   - allowed: bool indicating if registration/renewal is allowed
 *   - message: string message explaining why if not allowed
 */
function fws_goose_can_register_or_renew($uid) {
  $result = [
    'allowed' => TRUE,
    'message' => '',
  ];

  // Check registration period.
  if (!fws_goose_is_registration_period()) {
    $result['allowed'] = FALSE;
    $result['message'] = t('Registration and renewal are only available from January 1st to June 30th as per federal regulations.');
    return $result;
  }

  // Check if registration is expired due to missing activity reports.
  if (fws_goose_is_registration_expired($uid)) {
    $result['allowed'] = FALSE;
    $result['message'] = t('Your registration has expired because you have not reported your activity for the previous season. Please submit your activity report before renewing your registration.');
    return $result;
  }

  return $result;
}

/**
 * Implements hook_form_alter() for user profile forms.
 */
function fws_goose_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only apply to user edit forms (not registration)
  if ($form_id == 'user_form') {
    $uid = \Drupal::routeMatch()->getParameter('user')->id();
    $registration_check = fws_goose_can_register_or_renew($uid);
    if (!$registration_check['allowed']) {
      \Drupal::messenger()->addError($registration_check['message']);
      // If the reason is missing activity report, add a link to submit it.
      if (strpos($registration_check['message'], 'activity report') !== FALSE) {
        \Drupal::messenger()->addWarning(t('Please <a href="@url">submit your activity report</a> for the previous season before renewing your registration.', [
          '@url' => Url::fromRoute('node.add', ['node_type' => 'location'])->toString(),
        ]));
      }
      // Redirect back to user page.
      $form['#access'] = FALSE;
      $response = new RedirectResponse(Url::fromRoute('entity.user.canonical', ['user' => $uid])->toString());
      $response->send();
      exit;
    }
  }
}
