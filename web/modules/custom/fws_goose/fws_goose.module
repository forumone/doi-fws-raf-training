<?php

/**
 * @file
 * Contains fws_goose.module.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_alter().
 */
function fws_goose_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Handle the name node form separately.
  if ($form_id === 'node_name_form' || $form_id === 'node_name_edit_form') {
    // Always make the permit number field disabled.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }
  }

  // Add handling for report node form.
  if ($form_id === 'node_report_form' || $form_id === 'node_report_edit_form') {
    // Log when we're setting up the form for debugging.
    \Drupal::logger('fws_goose')->notice('Setting up form for @form_id', ['@form_id' => $form_id]);

    // Debug the form object structure.
    if (function_exists('kint')) {
      kint($form_state->getFormObject()->getEntity()->getEntityTypeId());
      kint($form_state->getFormObject()->getEntity()->bundle());
      kint($form['actions']);
      kint($form['#submit']);
    }

    // Add instructions at the top of the form using Bootstrap alert info box.
    $form['form_instructions'] = [
      '#type' => 'markup',
      '#markup' => '
        <div class="alert alert-info" role="alert">
          <div class="alert-heading">
            <h4>Report Compilation Note</h4>
          </div>
          <p>Sum the nests across all locations in a county for each month. Enter these totals in the Report of Activity Detail section for each county (or equivalent) and month.</p>

          <hr>

          <h4>Tips for Entering Report of Activity:</h4>
          <ol>
            <li>In the Report of Activity Detail section, select the appropriate county from the County list. If work occurred in multiple counties, start with one county; the system will auto-display the first county.</li>
            <li>After entering data, check "I Certify," then click "Save" to proceed to the next county. The system will total the monthly entries.</li>
            <li>Enter the number of nests with eggs destroyed per month in each county (or equivalent). Do not include individual eggs added or destroyed. Enter 0 if there was no activity in a county.</li>
            <li>Note: Use the "Save" button next to "I Certify" to save data without exiting, allowing edits for the next county before clicking "Submit and Home" to return to the home page.</li>
          </ol>
        </div>
      ',
      '#weight' => -100,
    ];

    // Make permit number read-only.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }

    // Make the report year, state, and county fields read-only.
    if (isset($form['field_report_year'])) {
      $form['field_report_year']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_report_year']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Default to current year if creating a new node.
      if ($form_id === 'node_report_form') {
        $form['field_report_year']['widget'][0]['value']['#value'] = date('Y');
        $form['field_report_year']['widget'][0]['value']['#default_value'] = date('Y');
      }
    }

    if (isset($form['field_location_state'])) {
      $form['field_location_state']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_location_state']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
    }

    if (isset($form['field_location_county'])) {
      $form['field_location_county']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_location_county']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
    }

    // Add the location dropdown at the top of the form.
    $form['location_selector'] = [
      '#type' => 'select',
      '#title' => t('Select Location'),
      '#description' => t('Select a location to pre-fill state and county information.'),
      '#options' => _fws_goose_get_user_locations(),
      '#weight' => -10,
      '#ajax' => [
        'callback' => '_fws_goose_location_selected',
        'wrapper' => 'report-location-fields-wrapper',
        'event' => 'change',
      ],
      '#required' => FALSE,
    ];

    // If this is an edit form with a permit number, add a helpful message.
    $node = $form_state->getFormObject()->getEntity();
    if ($node->id() && $node->hasField('field_permit_no') && !$node->get('field_permit_no')->isEmpty()) {
      $permit_number = $node->get('field_permit_no')->value;
      $form['location_selector']['#description'] .= ' ' . t('Locations are filtered to match permit number @permit.', ['@permit' => $permit_number]);
    }

    // Disable the location selector if the county field already has a value when editing.
    if ($form_id === 'node_report_edit_form' && $node->hasField('field_location_county') &&
        !$node->get('field_location_county')->isEmpty()) {
      $form['location_selector']['#disabled'] = TRUE;
      $form['location_selector']['#description'] .= ' ' . t('This field is disabled because location information is already set.');
      // If we're disabling the selector, it shouldn't be required.
      $form['location_selector']['#required'] = FALSE;
    }

    // Store the selected location ID as a hidden field.
    $form['selected_location_id'] = [
      '#type' => 'hidden',
      '#default_value' => '',
    ];

    // Wrap the location fields for Ajax updates.
    $form['location_fields_wrapper_start'] = [
      '#markup' => '<div id="report-location-fields-wrapper">',
      '#weight' => -5,
    ];

    $form['location_fields_wrapper_end'] = [
      '#markup' => '</div>',
      '#weight' => 20,
    ];

    // Add certification section with styling similar to the image.
    $form['certification_wrapper'] = [
      '#type' => 'container',
      '#weight' => 90,
      '#attributes' => [
        'class' => ['certification-container'],
        'style' => 'border: 1px solid #ddd; padding: 15px; background-color: #f8f8f8; margin-top: 20px;',
      ],
    ];

    $form['certification_wrapper']['title'] = [
      '#markup' => '<h2 style="margin-top: 0; border-bottom: 1px solid #ccc; padding-bottom: 10px;">Certification</h2>',
    ];

    $form['certification_wrapper']['subtitle'] = [
      '#markup' => '<h3 style="font-weight: bold; margin-bottom: 10px;">Registrant Certification</h3>',
    ];

    $form['certification_wrapper']['certification_text'] = [
      '#markup' => '<p style="margin-bottom: 15px;">I certify that the information in this report is true and correct to the best of my knowledge. I understand that any false statement herein may subject me to the criminal penalties of 18 U.S.C. 1001.</p>',
    ];

    $form['certification_wrapper']['certification_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'style' => 'display: flex; align-items: center;',
      ],
    ];

    $form['certification_wrapper']['certification_container']['certification_checkbox'] = [
      '#type' => 'checkbox',
      '#title' => t('I Certify'),
      '#required' => TRUE,
      '#attributes' => [
        'style' => 'margin-right: 10px;',
      ],
    ];

    // Add custom validation and submit handlers.
    $form['#validate'][] = '_fws_goose_report_validate';
    // Don't add to the form's submit handlers, as they may not be called.
    // Instead, add our submit handler directly to the save button.
    if (isset($form['actions']['submit'])) {
      \Drupal::logger('fws_goose')->notice('Adding submit handler directly to save button');
      if (!isset($form['actions']['submit']['#submit'])) {
        $form['actions']['submit']['#submit'] = [];
      }
      $form['actions']['submit']['#submit'][] = '_fws_goose_report_submit';

      // Debug the submit handlers on the button.
      if (function_exists('kint')) {
        kint($form['actions']['submit']['#submit']);
      }
    }
    else {
      \Drupal::logger('fws_goose')->error('Save button not found on form');
    }

    // Log the submit handlers for debugging.
    \Drupal::logger('fws_goose')->notice('Submit handlers: @handlers', ['@handlers' => print_r($form['#submit'] ?? [], TRUE)]);
  }

  if ($form_id === 'node_location_form' || $form_id === 'node_location_edit_form') {
    // Make permit number read-only.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }

    // Add the validate button after the access key field.
    $form['field_ca_access_key']['validate_ca'] = [
      '#type' => 'submit',
      '#value' => t('Validate Access'),
      '#name' => 'validate_ca_access',
      '#validate' => ['_fws_goose_validate_ca_access'],
      '#submit' => ['_fws_goose_validate_ca_access_submit'],
      '#limit_validation_errors' => [['field_ca_access_key']],
      '#weight' => 10,
    ];

    // Get the validated county from form state if it exists.
    $validated_county = $form_state->get('ca_validated_county');

    // If we have a validated county, convert state to read-only text field and set to California.
    if ($validated_county) {
      // Store the original state value for form processing.
      $form['field_location_state_ref']['widget']['#validated_state'] = 'CA';

      // Change the state field to a read-only text field.
      $form['field_location_state_ref']['widget']['#type'] = 'textfield';
      $form['field_location_state_ref']['widget']['#value'] = 'California';
      $form['field_location_state_ref']['widget']['#attributes']['readonly'] = TRUE;
      $form['field_location_state_ref']['widget']['#size'] = 60;

      // Add a hidden field to store the actual state reference value.
      $state_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'states',
        'name' => 'CA',
      ]);
      $state_term = reset($state_terms);
      if ($state_term) {
        $form['field_location_state_ref']['widget']['#default_value'] = $state_term->id();
      }
    }
    else {
      // Add state change handler to clear county when switching to CA.
      $form['field_location_state_ref']['widget']['#ajax'] = [
        '#type' => 'select',
        '#event' => 'change',
        '#callback' => '_fws_goose_state_changed',
        '#wrapper' => 'location-county-wrapper',
      ];
    }

    // Wrap county field for AJAX updates.
    $form['field_location_county']['#prefix'] = '<div id="location-county-wrapper">';
    $form['field_location_county']['#suffix'] = '</div>';

    // Get current state value.
    $state_value = NULL;
    $state_values = $form_state->getValue('field_location_state_ref');
    if (!empty($state_values[0]['target_id'])) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
      if ($term) {
        $state_value = $term->getName();
      }
    }
    // Also check for validated state.
    elseif (isset($form['field_location_state_ref']['widget']['#validated_state'])) {
      $state_value = $form['field_location_state_ref']['widget']['#validated_state'];
    }

    // If state is California, make county read-only and clear it if not from dropdown.
    if ($state_value === 'CA') {
      $form['field_location_county']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // If we have a validated county, set it in both fields.
      if ($validated_county) {
        $form['field_location_county']['widget'][0]['value']['#value'] = $validated_county;

        // Find and select the matching county in the dropdown.
        if (isset($form['field_ca_county_select']['widget']['#options'])) {
          foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
            if ($tid === '_none') {
              continue;
            }
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
            if ($term && $term->getName() === $validated_county) {
              $form['field_ca_county_select']['widget']['#default_value'] = $tid;
              break;
            }
          }
        }
      }
      else {
        // Clear the county field if no validated county.
        $form['field_location_county']['widget'][0]['value']['#value'] = '';
      }
    }

    // If we have a validated county, only enable selection of that county.
    if ($validated_county && isset($form['field_ca_county_select']['widget']['#options'])) {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if ($term) {
          $county_name = $term->getName();
          // Disable all counties except the validated one.
          if ($county_name !== $validated_county) {
            $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
            $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
          }
        }
      }
    }
    // If no county is validated yet, disable all counties.
    else {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid !== '_none') {
          $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
          $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
        }
      }
    }

    if (isset($form['field_ca_county_select']['widget']['#options'])) {
      $entity_type_manager = \Drupal::entityTypeManager();
      $term_storage = $entity_type_manager->getStorage('taxonomy_term');

      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = $term_storage->load($tid);
        if ($term && $term->hasField('field_iscountyrestricted')) {
          $is_restricted = $term->get('field_iscountyrestricted')->value;
          if ($is_restricted === 'Y') {
            // Only append [Restricted] if we haven't already appended [Access Code Required].
            if (strpos($form['field_ca_county_select']['widget']['#options'][$tid], '[Access Code Required]') === FALSE) {
              $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Restricted]';
            }
          }
        }
      }
    }

    // Add handler for CA county select changes.
    $form['field_ca_county_select']['widget']['#ajax'] = [
      '#type' => 'select',
      '#event' => 'change',
      '#callback' => '_fws_goose_ca_county_changed',
      '#wrapper' => 'location-county-wrapper',
    ];
  }

  // Handle permit application form.
  if (in_array($form_id, ['node_permit_form', 'node_permit_edit_form'])) {
    // Make permit number field read-only.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Only pre-fill for new nodes, not when editing.
      if ($form_id === 'node_permit_form') {
        // Try to prefill with user's permit number if available.
        $current_user = \Drupal::currentUser();
        if ($current_user->id() > 0) {
          $user = User::load($current_user->id());
          if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
            $permit_number = $user->get('field_permit_no')->value;
            $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
            $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
          }
        }
      }
    }

    // Call the helper function to prefill other fields from the user entity.
    // This is the key part that was missing!
    if ($form_id === 'node_permit_form') {
      _fws_goose_prefill_user_fields($form, $form_id);
    }
  }

  // Handle activity report form.
  if (in_array($form_id, ['node_report_form', 'node_report_edit_form'])) {
    // Make permit number read-only and pre-fill with user's permit number.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Only pre-fill for new nodes, not when editing.
      if ($form_id === 'node_report_form') {
        // Try to prefill with user's permit number if available.
        $current_user = \Drupal::currentUser();
        if ($current_user->id() > 0) {
          $user = User::load($current_user->id());
          if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
            $permit_number = $user->get('field_permit_no')->value;
            $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
            $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
          }
        }
      }
    }

    // Make report year field default to current year for new reports.
    if (isset($form['field_report_year']) && $form_id === 'node_report_form') {
      $form['field_report_year']['widget'][0]['value']['#default_value'] = date('Y');
    }

    // Add certification section with checkbox.
    $form['certification_wrapper'] = [
      '#type' => 'container',
      '#weight' => 90,
      '#attributes' => [
        'class' => ['certification-container'],
        'style' => 'border: 1px solid #ddd; padding: 15px; background-color: #f8f8f8; margin-top: 20px;',
      ],
    ];

    $form['certification_wrapper']['title'] = [
      '#markup' => '<h2 style="margin-top: 0; border-bottom: 1px solid #ccc; padding-bottom: 10px;">Certification</h2>',
    ];

    $form['certification_wrapper']['certification_text'] = [
      '#markup' => '<p style="margin-bottom: 15px;">I certify that the information in this report is true and correct to the best of my knowledge. I understand that any false statement herein may subject me to the criminal penalties of 18 U.S.C. 1001.</p>',
    ];

    $form['certification_wrapper']['certification_checkbox'] = [
      '#type' => 'checkbox',
      '#title' => t('I Certify'),
      '#required' => TRUE,
    ];

    // Add validation and submit handlers.
    $form['#validate'][] = '_fws_goose_permit_report_validate';
  }
}

/**
 * AJAX callback for state changes.
 */
function _fws_goose_state_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected state.
  $state_values = $form_state->getValue('field_location_state_ref');
  if (!empty($state_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
    if ($term && $term->getName() === 'CA') {
      // Clear the county field when switching to CA.
      $form['field_location_county']['widget'][0]['value']['#value'] = '';
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        ['']
      ));
    }
  }

  return $response;
}

/**
 * AJAX callback for CA county select changes.
 */
function _fws_goose_ca_county_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected county.
  $county_values = $form_state->getValue('field_ca_county_select');
  if (!empty($county_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($county_values[0]['target_id']);
    if ($term) {
      // Update the county field with the selected county name.
      $county_name = $term->getName();
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        [$county_name]
      ));
    }
  }

  return $response;
}

/**
 * Validation function for report node form.
 */
function _fws_goose_report_validate($form, FormStateInterface $form_state) {
  // Add debug log statement.
  \Drupal::logger('fws_goose')->notice('_fws_goose_report_validate handler called');

  // Get the raw form values to check the certification checkbox.
  $all_values = $form_state->getValues();

  // Debug the structure of form values.
  \Drupal::logger('fws_goose')->notice('Form values structure: @structure',
    ['@structure' => print_r(array_keys($all_values), TRUE)]);

  if (isset($all_values['certification_wrapper'])) {
    \Drupal::logger('fws_goose')->notice('certification_wrapper structure: @structure',
      ['@structure' => print_r($all_values['certification_wrapper'], TRUE)]);
  }

  // Try different paths to find the certification checkbox value.
  $certification = FALSE;
  if (isset($all_values['certification_wrapper']['certification_container']['certification_checkbox'])) {
    $certification = $all_values['certification_wrapper']['certification_container']['certification_checkbox'];
    \Drupal::logger('fws_goose')->notice('Found certification in path 1: @value', ['@value' => $certification]);
  }
  elseif ($form_state->hasValue([
    'certification_wrapper',
    'certification_container',
    'certification_checkbox',
  ])) {
    $certification = $form_state->getValue([
      'certification_wrapper',
      'certification_container',
      'certification_checkbox',
    ]);
    \Drupal::logger('fws_goose')->notice('Found certification in path 2: @value', ['@value' => $certification]);
  }
  elseif (isset($all_values['certification_checkbox'])) {
    $certification = $all_values['certification_checkbox'];
    \Drupal::logger('fws_goose')->notice('Found certification in path 3: @value', ['@value' => $certification]);
  }
  else {
    \Drupal::logger('fws_goose')->notice('Certification checkbox not found in any expected path');
    // Debug the structure of the form.
    if (function_exists('kint_require')) {
      \Drupal::logger('fws_goose')->notice('Form values dump: @values', ['@values' => print_r($all_values, TRUE)]);
    }
  }

  if (empty($certification)) {
    $form_state->setErrorByName('certification_wrapper][certification_container][certification_checkbox', t('You must certify that the information in this report is true and correct.'));
  }

  // Check if location data is present when not using the selector.
  if (empty($form_state->getValue('location_selector'))) {
    // Make sure state and county are not empty if location selector is not used.
    if (empty($form_state->getValue('field_location_state')[0]['value']) ||
        empty($form_state->getValue('field_location_county')[0]['value'])) {
      $form_state->setErrorByName('location_selector', t('You must either select a location or manually enter state and county information.'));
    }
  }
}

/**
 * Submit handler for the report node form.
 */
function _fws_goose_report_submit($form, FormStateInterface $form_state) {
  // Get the node object being saved.
  $node = $form_state->getFormObject()->getEntity();

  // Get the selected location ID.
  $location_nid = $form_state->getValue('location_selector');

  // Only process location data if a location was selected.
  if (!empty($location_nid)) {
    // Get the location node.
    $location_node = \Drupal::entityTypeManager()->getStorage('node')->load($location_nid);

    if ($location_node) {
      // Copy location fields to the report node.
      if ($location_node->hasField('field_location_state') && !$location_node->get('field_location_state')->isEmpty()) {
        $state = $location_node->get('field_location_state')->value;
        $node->set('field_location_state', $state);
      }

      if ($location_node->hasField('field_location_county') && !$location_node->get('field_location_county')->isEmpty()) {
        $county = $location_node->get('field_location_county')->value;
        $node->set('field_location_county', $county);
      }
    }
  }

  // Set the permit number from the user's information.
  $current_user = \Drupal::currentUser();
  if ($current_user->id() > 0) {
    $user = User::load($current_user->id());
    if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
      $permit_number = $user->get('field_permit_no')->value;
      $node->set('field_permit_no', $permit_number);
    }
  }

  // Set the report year to the current year if not already set.
  if ($node->get('field_report_year')->isEmpty()) {
    $node->set('field_report_year', date('Y'));
  }

  // Save the node again with the correct values.
  $node->save();

  // Check if certification checkbox was checked.
  $certification = FALSE;
  $all_values = $form_state->getValues();

  if (isset($all_values['certification_wrapper']['certification_container']['certification_checkbox'])) {
    $certification = $all_values['certification_wrapper']['certification_container']['certification_checkbox'];
  }
  elseif ($form_state->hasValue([
    'certification_wrapper',
    'certification_container',
    'certification_checkbox',
  ])) {
    $certification = $form_state->getValue([
      'certification_wrapper',
      'certification_container',
      'certification_checkbox',
    ]);
  }
  elseif (isset($all_values['certification_checkbox'])) {
    $certification = $all_values['certification_checkbox'];
  }

  // Send email notification if the form was certified.
  if ($certification) {
    // Send email notification to the user.
    $current_user = \Drupal::currentUser();
    if ($current_user->id() > 0) {
      $user = User::load($current_user->id());
      if ($user) {
        $user_email = $user->getEmail();

        if (!empty($user_email)) {
          // Prepare notification data.
          $notification_data = [
            'username' => $user->getAccountName(),
            'email' => $user_email,
            'operation' => 'report_certified',
            'user_id' => $user->id(),
            'node_id' => $node->id(),
            'node_title' => $node->getTitle(),
          ];

          // Add state and county if available.
          if ($node->hasField('field_location_state') && !$node->get('field_location_state')->isEmpty()) {
            $notification_data['state'] = $node->get('field_location_state')->value;
          }

          if ($node->hasField('field_location_county') && !$node->get('field_location_county')->isEmpty()) {
            $notification_data['county'] = $node->get('field_location_county')->value;
          }

          // Add report year if available.
          if ($node->hasField('field_report_year') && !$node->get('field_report_year')->isEmpty()) {
            $notification_data['report_year'] = $node->get('field_report_year')->value;
          }

          // Add egg count data.
          $egg_count_fields = [
            'field_qty_nest_egg_destroyed_mar',
            'field_qty_nest_egg_destroyed_apr',
            'field_qty_nest_egg_destroyed_may',
            'field_qty_nest_egg_destroyed_jun',
            'field_qty_nest_egg_destroyed_tot',
          ];

          foreach ($egg_count_fields as $field) {
            if ($node->hasField($field)) {
              $notification_data[$field] = $node->get($field)->isEmpty() ? 0 : $node->get($field)->value;
            }
            else {
              $notification_data[$field] = 0;
            }
          }

          // Send the email.
          $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
          $mailManager = \Drupal::service('plugin.manager.mail');
          $module = 'fws_goose';

          $result = $mailManager->mail($module, 'report_certified', $user_email, $language, $notification_data, NULL, TRUE);

          if (!$result['result']) {
            \Drupal::logger('fws_goose')->error('Failed to send report_certified email');
          }
        }
      }
    }
  }
}

/**
 * Validation function for the CA access key field.
 */
function _fws_goose_validate_ca_access($form, FormStateInterface $form_state) {
  $access_key = $form_state->getValue('field_ca_access_key')[0]['value'];
  if (empty($access_key)) {
    $form_state->setErrorByName('field_ca_access_key', t('Please enter an access key.'));
    return;
  }

  // Look up the access key in taxonomy.
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // First try exact match on name.
  $query = $term_storage->getQuery()
    ->condition('vid', 'california_access_key')
    ->condition('name', $access_key)
    ->accessCheck(FALSE)
    ->range(0, 1);
  $tids = $query->execute();

  if (empty($tids)) {
    $form_state->setErrorByName('field_ca_access_key', t('Invalid access key. Please try again or contact support.'));
    return;
  }

  // Get the county name from the term.
  $tid = reset($tids);
  $term = $term_storage->load($tid);
  if (!$term) {
    $form_state->setErrorByName('field_ca_access_key', t('Error loading county information. Please try again.'));
    return;
  }

  // Save the county name in form state - county name is already in the term name.
  $county_name = $term->getName();
  $form_state->set('ca_validated_county', $county_name);
  $form_state->set('ca_validated_county_tid', $tid);
}

/**
 * Submit handler for the CA access key validation.
 */
function _fws_goose_validate_ca_access_submit($form, FormStateInterface $form_state) {
  // Get the validated county from form state.
  $validated_county = $form_state->get('ca_validated_county');
  $validated_county_tid = $form_state->get('ca_validated_county_tid');

  if ($validated_county && $validated_county_tid) {
    \Drupal::messenger()->addStatus(t('Access code validated for @county County.', ['@county' => $validated_county]));
  }

  // Rebuild the form to show the validated county.
  $form_state->setRebuild(TRUE);
}

/**
 * Implements hook_entity_presave().
 */
function fws_goose_entity_presave(EntityInterface $entity) {
  // Only process node entities.
  if ($entity->getEntityTypeId() === 'node' && $entity instanceof NodeInterface) {
    // Handle permit numbering for new nodes that need permit numbers.
    if ($entity->isNew()) {
      // Handle permit nodes.
      if ($entity->bundle() === 'permit' && $entity->hasField('field_permit_no')) {
        // Skip permit number generation if already set.
        if (!$entity->get('field_permit_no')->isEmpty()) {
          return;
        }

        // Get or initialize the permit number counter from configuration.
        $config = \Drupal::configFactory()->getEditable('fws_goose.settings');
        $next_number = $config->get('permit_number_counter');
        if ($next_number === NULL) {
          // Initialize with 1 if no counter exists.
          $next_number = 1;
        }
        else {
          $next_number++;
        }

        // Format the permit number (5 digits + 'A').
        $permit_number = sprintf('%05dA', $next_number);

        // Double check for duplicates.
        $duplicate_check = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->getQuery()
          ->condition('type', ['location', 'permit'], 'IN')
          ->condition('field_permit_no', $permit_number)
          ->accessCheck(FALSE)
          ->count()
          ->execute();

        if ($duplicate_check > 0) {
          \Drupal::logger('fws_goose')->error('Duplicate permit number detected: @permit', ['@permit' => $permit_number]);
          return;
        }

        // Save the new counter value.
        $config->set('permit_number_counter', $next_number)
          ->save(TRUE);

        // Set the permit number on the entity.
        $entity->set('field_permit_no', $permit_number);

        // Also save the permit number to the user profile.
        $user = User::load($entity->getOwnerId());
        if ($user && $user->hasField('field_permit_no') && $user->get('field_permit_no')->isEmpty()) {
          $user->set('field_permit_no', $permit_number);
          $user->save();
          \Drupal::logger('fws_goose')->notice('Saved permit number @permit to user @uid', [
            '@permit' => $permit_number,
            '@uid' => $entity->getOwnerId(),
          ]);
        }
      }
      // Handle location nodes.
      elseif ($entity->bundle() === 'location' && $entity->hasField('field_permit_no')) {
        // Skip permit number generation if already set.
        if (!$entity->get('field_permit_no')->isEmpty()) {
          return;
        }

        // Get or initialize the permit number counter from configuration.
        $config = \Drupal::configFactory()->getEditable('fws_goose.settings');
        $next_number = $config->get('permit_number_counter');
        if ($next_number === NULL) {
          // Initialize with 1 if no counter exists.
          $next_number = 1;
        }
        else {
          $next_number++;
        }

        // Format the permit number (5 digits + 'A').
        $permit_number = sprintf('%05dA', $next_number);

        // Double check for duplicates.
        $duplicate_check = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->getQuery()
          ->condition('type', ['location', 'permit'], 'IN')
          ->condition('field_permit_no', $permit_number)
          ->accessCheck(FALSE)
          ->count()
          ->execute();

        if ($duplicate_check > 0) {
          \Drupal::logger('fws_goose')->error('Duplicate permit number detected: @permit', ['@permit' => $permit_number]);
          return;
        }

        // Save the new counter value.
        $config->set('permit_number_counter', $next_number)
          ->save(TRUE);

        // Set the permit number on the entity.
        $entity->set('field_permit_no', $permit_number);

        // Also save the permit number to the user profile.
        $current_user = \Drupal::currentUser();
        if ($current_user->id() > 0) {
          $user = User::load($current_user->id());
          if ($user && $user->hasField('field_permit_no') && $user->get('field_permit_no')->isEmpty()) {
            $user->set('field_permit_no', $permit_number);
            $user->save();
            \Drupal::logger('fws_goose')->notice('Saved permit number @permit to user @uid', [
              '@permit' => $permit_number,
              '@uid' => $current_user->id(),
            ]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function fws_goose_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('name', 'Drupal\fws_goose\Form\NameNodeForm');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function fws_goose_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();

  // Check if we're on the add name form page.
  if ($current_path == '/node/add/name') {
    // Check if the current user has a permit number.
    $current_user = \Drupal::currentUser();
    if ($current_user->id() > 0) {
      $user = User::load($current_user->id());

      // If user has no permit number, redirect to location form.
      if (!$user || !$user->hasField('field_permit_no') || $user->get('field_permit_no')->isEmpty()) {
        // Set a message explaining why they're being redirected.
        \Drupal::messenger()->addWarning(t('You must create a location with a permit number before adding a name. Please complete this form first.'));

        // Redirect to the location add form.
        $url = Url::fromUri('internal:/node/add/location')->toString();
        $response = new RedirectResponse($url);
        $response->send();
        exit;
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function fws_goose_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // For title display on user pages.
  if ($route_name == 'entity.user.canonical') {
    $variables['title'] = t('Account Profile');
  }
}

/**
 * Sends an email notification about a certified permit node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The permit node entity.
 */
function fws_goose_send_certification_notification(NodeInterface $node) {
  // Initialize the logger.
  $logger = \Drupal::logger('fws_goose');
  $logger->notice('Starting certification notification process for permit node ID: @id', ['@id' => $node->id()]);

  // Check if this is actually a permit node.
  if ($node->bundle() !== 'permit') {
    $logger->warning('Attempted to send certification notification for non-permit node: @type, ID: @id', [
      '@type' => $node->bundle(),
      '@id' => $node->id(),
    ]);
    return;
  }

  // Get the owner entity.
  $owner = $node->getOwner();
  if (!$owner) {
    $logger->error('Cannot send certification email - permit node has no owner (NID: @id)', [
      '@id' => $node->id(),
    ]);
    return;
  }

  // Get the owner's email address.
  $owner_email = $owner->getEmail();
  if (empty($owner_email)) {
    $logger->error('Cannot send certification email - owner has no email address (UID: @uid, NID: @nid)', [
      '@uid' => $owner->id(),
      '@nid' => $node->id(),
    ]);
    return;
  }

  $logger->info('Processing certification notification for permit: @title (NID: @nid) for owner: @name (UID: @uid, Email: @email)', [
    '@title' => $node->getTitle(),
    '@nid' => $node->id(),
    '@name' => $owner->getAccountName(),
    '@uid' => $owner->id(),
    '@email' => $owner_email,
  ]);

  // Prepare the notification data - pass node ID instead of full object.
  $notification_data = [
    'owner_username' => $owner->getAccountName(),
    'owner_email' => $owner_email,
    'owner_uid' => $owner->id(),
  // Keep operation key consistent for hook_mail.
    'operation' => 'certified',
  // Pass Node ID.
    'node_id' => $node->id(),
    // Removed user_id, url (we'll construct URL in hook_mail if needed)
  ];

  // Add relevant data from the permit node.
  if ($node->hasField('field_permit_no') && !$node->get('field_permit_no')->isEmpty()) {
    $notification_data['permit_number'] = $node->get('field_permit_no')->value;
    $logger->info('Permit has permit number: @permit', ['@permit' => $notification_data['permit_number']]);
  }
  else {
    $logger->info('No permit number available for this permit node.');
  }

  // Use field_business_name from permit node if it exists.
  if ($node->hasField('field_business_name') && !$node->get('field_business_name')->isEmpty()) {
    $notification_data['business_name'] = $node->get('field_business_name')->value;
    $logger->info('Permit has business name: @business', ['@business' => $notification_data['business_name']]);
  }
  else {
    $logger->info('No business name available for this permit node.');
  }

  // Log the complete notification data.
  $logger->debug('Notification data: @data', ['@data' => print_r($notification_data, TRUE)]);

  $logger->info('Sending certification confirmation to owner email: @email', ['@email' => $owner_email]);

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'fws_goose';

  $logger->info('About to send mail via @module module using key "certified" for NID @nid', [
    '@module' => $module,
    '@nid' => $node->id(),
  ]);
  $result = $mailManager->mail($module, 'certified', $owner_email, $language, $notification_data, NULL, TRUE);

  if ($result['result'] !== TRUE) {
    $logger->error('Error sending certification confirmation email for NID @nid. Mail system reported: @error', [
      '@nid' => $node->id(),
      '@error' => $result['error'] ?? 'Unknown error',
    ]);
  }
  else {
    $logger->info('Successfully sent certification confirmation email for NID @nid.', ['@nid' => $node->id()]);
  }

  // Also send notification to administrators if configured.
  $config = \Drupal::config('fws_notifications.settings');
  $admin_emails_config = $config->get('notification_emails');
  $admin_emails = !empty($admin_emails_config) ? explode(',', $admin_emails_config) : [];

  if (!empty($admin_emails)) {
    $emails_string = implode(', ', $admin_emails);
    $logger->info('Also sending admin notification for NID @nid to: @emails', [
      '@nid' => $node->id(),
      '@emails' => $emails_string,
    ]);

    // Pass the same notification data, hook_mail can adapt based on the key ('certified_admin').
    $result = $mailManager->mail($module, 'certified_admin', implode(',', $admin_emails), $language, $notification_data, NULL, TRUE);

    if ($result['result'] !== TRUE) {
      $logger->error('Error sending admin notification email for NID @nid. Mail system reported: @error', [
        '@nid' => $node->id(),
        '@error' => $result['error'] ?? 'Unknown error',
      ]);
    }
    else {
      $logger->info('Successfully sent admin notification email for NID @nid.', ['@nid' => $node->id()]);
    }
  }

  $logger->notice('Completed certification notification process for permit node: @title (NID: @id)', [
    '@title' => $node->getTitle(),
    '@id' => $node->id(),
  ]);
}

/**
 * Implements hook_mail().
 */
function fws_goose_mail($key, &$message, $params) {
  switch ($key) {
    case 'certified':
      // Email to the permit owner who certified.
      $message['subject'] = t('Canada Goose Registration Confirmation');

      // Load the node from the passed node ID.
      $node = isset($params['node_id']) ? Node::load($params['node_id']) : NULL;
      if (!$node || $node->bundle() !== 'permit') {
        \Drupal::logger('fws_goose')->error('Could not load permit node or invalid node passed to hook_mail for key "certified". Node ID: @nid', ['@nid' => $params['node_id'] ?? 'N/A']);
        $message['body'][] = t('Error processing registration confirmation.');
        return;
      }

      // Get the owner entity.
      $owner = $node->getOwner();
      if (!$owner) {
        \Drupal::logger('fws_goose')->error('Could not load owner for permit node in hook_mail for key "certified". Node ID: @nid', ['@nid' => $node->id()]);
        $message['body'][] = t('Error processing registration confirmation.');
        return;
      }

      // Create the email body using data from the node and owner.
      $body = [];
      $body[] = t('This is confirmation that your registration has been received.');
      $body[] = '';

      // Permit/registration information from Node.
      if ($node->hasField('field_permit_no') && !$node->get('field_permit_no')->isEmpty()) {
        $permit_no = $node->get('field_permit_no')->value;
        $body[] = t('Registration No. RG-@permit', ['@permit' => $permit_no]);
      }

      // Date information - Use Node created date?
      $created_timestamp = $node->getCreatedTime();
      $body[] = t('Date of Registration: @date', ['@date' => \Drupal::service('date.formatter')->format($created_timestamp, 'custom', 'n/j/Y')]);
      $changed_timestamp = $node->getChangedTime();
      if ($changed_timestamp > $created_timestamp) {
        $body[] = t('Date Amended: @date', ['@date' => \Drupal::service('date.formatter')->format($changed_timestamp, 'custom', 'n/j/Y')]);
      }

      // Registrant information from Node fields.
      $registrant_name = '';
      $is_business = FALSE;
      // Determine if business from field_bi_cd or field_registrant_type_cd.
      if ($node->hasField('field_bi_cd') && !$node->get('field_bi_cd')->isEmpty() && $node->get('field_bi_cd')->value == 'B') {
        $is_business = TRUE;
      }
      elseif ($node->hasField('field_registrant_type_cd') && $node->get('field_registrant_type_cd')->entity && $node->get('field_registrant_type_cd')->entity->label() == 'Business') {
        $is_business = TRUE;
      }

      if ($is_business) {
        // Use correct field name.
        if ($node->hasField('field_applicant_business_name') && !$node->get('field_applicant_business_name')->isEmpty()) {
          $registrant_name = trim($node->get('field_applicant_business_name')->value);
          $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
        }
        // Business Contact Person - Assume principal fields are used?
        $contact_name_parts = [];
        if ($node->hasField('field_principal_last_name') && !$node->get('field_principal_last_name')->isEmpty()) {
          $contact_name_parts[] = trim($node->get('field_principal_last_name')->value);
        }
        if ($node->hasField('field_principal_first_name') && !$node->get('field_principal_first_name')->isEmpty()) {
          $contact_name_parts[] = trim($node->get('field_principal_first_name')->value);
        }
        if (!empty($contact_name_parts)) {
          $body[] = t('Business Contact Person: @name', ['@name' => implode(', ', $contact_name_parts)]);
        }
      }
      // Use applicant name fields for individual.
      elseif ($node->hasField('field_applicant_last_name') && !$node->get('field_applicant_last_name')->isEmpty()) {
        $name_parts = [];
        $name_parts[] = trim($node->get('field_applicant_last_name')->value);
        if ($node->hasField('field_applicant_first_name') && !$node->get('field_applicant_first_name')->isEmpty()) {
          $name_parts[] = trim($node->get('field_applicant_first_name')->value);
        }
        $registrant_name = implode(', ', $name_parts);
        $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
      }
      else {
        // Fallback to owner username if no name fields found on node.
        $registrant_name = $owner->getAccountName();
        $body[] = t('Registrant (Landowner) Name: @name', ['@name' => $registrant_name]);
      }

      // Registrant type from Node field.
      $reg_type_display = 'N/A';
      if ($node->hasField('field_registrant_type_cd') && $node->get('field_registrant_type_cd')->entity) {
        $reg_type_display = $node->get('field_registrant_type_cd')->entity->label();
      }
      elseif ($node->hasField('field_bi_cd') && !$node->get('field_bi_cd')->isEmpty()) {
        $reg_type_display = ($node->get('field_bi_cd')->value == 'B') ? t('Business') : t('Individual');
      }
      $body[] = t('Registrant Type: @type', ['@type' => $reg_type_display]);

      $body[] = '';

      // Business Information Panel (Conditional)
      if ($is_business) {
        $business_fields = [];
        // Add principal info here.
        if ($node->hasField('field_principal_last_name') && !$node->get('field_principal_last_name')->isEmpty()) {
          $p_name_parts = [trim($node->get('field_principal_last_name')->value)];
          if ($node->hasField('field_principal_first_name') && !$node->get('field_principal_first_name')->isEmpty()) {
            $p_name_parts[] = trim($node->get('field_principal_first_name')->value);
          }
          // Add middle name, suffix if they exist on permit node.
          if ($node->hasField('field_principal_middle_name') && !$node->get('field_principal_middle_name')->isEmpty()) {
            $p_name_parts[] = trim($node->get('field_principal_middle_name')->value);
          }
          if ($node->hasField('field_principal_suffix') && !$node->get('field_principal_suffix')->isEmpty()) {
            $p_name_parts[] = trim($node->get('field_principal_suffix')->value);
          }
          $business_fields[] = t('Principal Name: @name', ['@name' => implode(', ', $p_name_parts)]);
        }
        if ($node->hasField('field_principal_title') && !$node->get('field_principal_title')->isEmpty()) {
          $business_fields[] = t('Principal Title: @title', ['@title' => $node->get('field_principal_title')->value]);
        }
        if ($node->hasField('field_principal_telephone') && !$node->get('field_principal_telephone')->isEmpty()) {
          $business_fields[] = t('Principal Telephone: @phone', ['@phone' => $node->get('field_principal_telephone')->value]);
        }
        // Add primary contact fields.
        if ($node->hasField('field_primary_contact_name') && !$node->get('field_primary_contact_name')->isEmpty()) {
          $business_fields[] = t('Primary Contact Name: @name', ['@name' => $node->get('field_primary_contact_name')->value]);
        }
        if ($node->hasField('field_primary_contact_telephone') && !$node->get('field_primary_contact_telephone')->isEmpty()) {
          $business_fields[] = t('Primary Contact Telephone: @phone', ['@phone' => $node->get('field_primary_contact_telephone')->value]);
        }
        if ($node->hasField('field_primary_contact_email') && !$node->get('field_primary_contact_email')->isEmpty()) {
          $business_fields[] = t('Primary Contact Email: @email', ['@email' => $node->get('field_primary_contact_email')->value]);
        }

        if (!empty($business_fields)) {
          $body[] = t('Business Information:');
          $body[] = '';
          $body = array_merge($body, $business_fields);
          $body[] = '';
        }
      }

      // Address and Contact Information from Node fields.
      $address_lines = [];
      $has_address_info = FALSE;
      // Check specific address lines.
      if ($node->hasField('field_applicant_address_l1') && !$node->get('field_applicant_address_l1')->isEmpty()) {
        $line = trim($node->get('field_applicant_address_l1')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }
      if ($node->hasField('field_applicant_address_l2') && !$node->get('field_applicant_address_l2')->isEmpty()) {
        $line = trim($node->get('field_applicant_address_l2')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }
      if ($node->hasField('field_applicant_address_l3') && !$node->get('field_applicant_address_l3')->isEmpty()) {
        $line = trim($node->get('field_applicant_address_l3')->value);
        if (!empty($line)) {
          $address_lines[] = $line;
          $has_address_info = TRUE;
        }
      }

      // Add other address parts.
      $city = $node->hasField('field_applicant_city') ? trim($node->get('field_applicant_city')->value) : '';
      $county = $node->hasField('field_applicant_county') ? trim($node->get('field_applicant_county')->value) : '';
      $state = $node->hasField('field_applicant_state') && $node->get('field_applicant_state')->entity ? $node->get('field_applicant_state')->entity->label() : '';
      $zip = $node->hasField('field_applicant_zip') ? trim($node->get('field_applicant_zip')->value) : '';
      $home_phone = $node->hasField('field_applicant_home_phone') ? trim($node->get('field_applicant_home_phone')->value) : '';
      $work_phone = $node->hasField('field_applicant_work_phone') ? trim($node->get('field_applicant_work_phone')->value) : '';
      $email = $node->hasField('field_applicant_email_address') ? trim($node->get('field_applicant_email_address')->value) : '';

      if (!empty($address_lines) || !empty($city) || !empty($county) || !empty($state) || !empty($zip) || !empty($home_phone) || !empty($work_phone) || !empty($email)) {
        // Mark true if any part exists.
        $has_address_info = TRUE;
        $body[] = t('Registrant Address and Contact Information:');
        $body[] = '';

        foreach ($address_lines as $line) {
          $body[] = $line;
        }

        if (!empty($county)) {
          // Display county on its own line?
          $body[] = $county;
        }

        $location_str = '';
        if (!empty($city)) {
          $location_str .= $city;
        }
        if (!empty($state)) {
          $location_str .= (!empty($location_str) ? ", $state" : $state);
        }
        if (!empty($zip)) {
          $location_str .= (!empty($location_str) ? " $zip" : $zip);
        }
        if (!empty($location_str)) {
          $body[] = $location_str;
        }

        if (!empty($home_phone)) {
          $body[] = '';
          $body[] = t('Home Telephone: @phone', ['@phone' => $home_phone]);
        }
        if (!empty($work_phone)) {
          if (empty($home_phone)) {
            $body[] = '';
          } // Add space if only work phone exists
          $body[] = t('Work Telephone: @phone', ['@phone' => $work_phone]);
        }
        if (!empty($email)) {
          if (empty($home_phone) && empty($work_phone)) {
            $body[] = '';
          } // Add space if only email exists
          $body[] = t('Email: @email', ['@email' => $email]);
        }
        $body[] = '';
      }

      // Get locations for this user (owner of the permit).
      if ($owner) {
        $locations = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadByProperties([
            'type' => 'location',
            'uid' => $owner->id(),
            'status' => 1,
          ]);

        if (!empty($locations)) {
          $location_lines = [];
          $count = 1;
          $has_locations = FALSE;

          foreach ($locations as $location) {
            // ... (Location processing logic - assuming location fields are correct) ...
            $location_address_value = $location->hasField('field_location_address') ? trim($location->get('field_location_address')->value) : '';
            $location_city_value = $location->hasField('field_location_city') ? trim($location->get('field_location_city')->value) : '';
            $location_county_value = $location->hasField('field_location_county') ? trim($location->get('field_location_county')->value) : '';
            $location_state_value = $location->hasField('field_location_state_ref') && $location->get('field_location_state_ref')->entity ? $location->get('field_location_state_ref')->entity->label() : '';
            $location_zip_value = $location->hasField('field_location_zip') ? trim($location->get('field_location_zip')->value) : '';
            $location_desc = $location->hasField('field_location_description') ? trim($location->get('field_location_description')->value) : '';

            if (!empty($location_county_value) || !empty($location_address_value) || !empty($location_desc) || !empty($location_city_value) || !empty($location_state_value) || !empty($location_zip_value)) {
              $location_line = "   $count) ";
              if (!empty($location_county_value)) {
                $location_line .= "$location_county_value, ";
              }
              if (!empty($location_address_value)) {
                $location_line .= $location_address_value;
              }
              elseif (!empty($location_desc)) {
                $location_line .= $location_desc;
              }
              if (!empty($location_city_value) || !empty($location_state_value)) {
                $location_line .= ",  ";
                if (!empty($location_city_value)) {
                  $location_line .= $location_city_value;
                }
                if (!empty($location_state_value)) {
                  $location_line .= ",  $location_state_value";
                }
              }
              if (!empty($location_zip_value)) {
                $location_line .= " $location_zip_value";
              }
              $location_lines[] = $location_line;
              $count++;
              $has_locations = TRUE;
            }
          }

          if ($has_locations) {
            $body[] = t('Location of Properties where Activity will occur:');
            $body[] = '';
            $body = array_merge($body, $location_lines);
            $body[] = '';
          }
        }
      }

      // Get agents/employees for this user (owner of the permit).
      if ($owner) {
        $agents = \Drupal::entityTypeManager()
          ->getStorage('node')
          ->loadByProperties([
            'type' => 'name',
            'uid' => $owner->id(),
            'status' => 1,
          ]);

        if (!empty($agents)) {
          $agent_lines = [];
          $count = 1;
          $has_agents = FALSE;

          foreach ($agents as $agent) {
            // ... (Agent processing logic - seems okay) ...
            $agent_name = $agent->label();
            $agent_organization = $agent->hasField('field_organization_name') ? trim($agent->get('field_organization_name')->value) : '';
            if (!empty($agent_name) || !empty($agent_organization)) {
              $agent_line = "   $count) ";
              if (!empty($agent_name)) {
                $agent_line .= $agent_name;
              }
              if (!empty($agent_organization)) {
                $agent_line .= " ($agent_organization)";
              }
              $agent_lines[] = $agent_line;
              $count++;
              $has_agents = TRUE;
            }
          }

          if ($has_agents) {
            $body[] = t('Agent/Employee:');
            $body[] = '';
            $body = array_merge($body, $agent_lines);
            $body[] = '';
          }
        }
      }

      // Add the conditions and signature section.
      $body[] = t('Conditions: You and your agents or employees must comply with the Resident Canada Goose Nest & Egg Depredation Order Conditions.');
      $body[] = '';
      $body[] = t('If agents or employees will conduct the nest and egg work on your behalf, you may sign this registration confirmation and provide them a copy as evidence of your authorization to perform the work.');
      $body[] = '';
      $body[] = t('Signature of Registrant (Landowner):  ______________________________________________');

      // Set the message body.
      $message['body'] = $body;
      break;

    case 'certified_admin':
      // Notification to administrators about permit certification.
      $node = isset($params['node_id']) ? Node::load($params['node_id']) : NULL;
      if (!$node || $node->bundle() !== 'permit') {
        \Drupal::logger('fws_goose')->error('Could not load permit node or invalid node passed to hook_mail for key "certified_admin". Node ID: @nid', ['@nid' => $params['node_id'] ?? 'N/A']);
        $message['body'][] = t('Error processing admin notification for certification.');
        return;
      }
      $owner = $node->getOwner();
      if (!$owner) {
        \Drupal::logger('fws_goose')->error('Could not load owner for permit node in hook_mail for key "certified_admin". Node ID: @nid', ['@nid' => $node->id()]);
        $message['body'][] = t('Error processing admin notification.');
        return;
      }

      $message['subject'] = t('Permit Certified: @permit_no (@owner_username)', [
        '@permit_no' => $node->hasField('field_permit_no') ? $node->get('field_permit_no')->value : $node->getTitle(),
        '@owner_username' => $owner->getAccountName(),
      ]);

      $body = [];
      $body[] = t('A permit has been certified.');
      $body[] = t('Permit Node: @title (NID: @nid)', ['@title' => $node->getTitle(), '@nid' => $node->id()]);
      $body[] = t('Owner: @username (UID: @uid)', ['@username' => $owner->getAccountName(), '@uid' => $owner->id()]);
      $body[] = t('Owner Email: @email', ['@email' => $owner->getEmail()]);
      $body[] = t('View Permit: @url', ['@url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString()]);
      $body[] = '';

      // Add specific permit details.
      if ($node->hasField('field_permit_no') && !$node->get('field_permit_no')->isEmpty()) {
        $body[] = t('Permit Number: RG-@permit', ['@permit' => $node->get('field_permit_no')->value]);
      }
      if ($node->hasField('field_business_name') && !$node->get('field_business_name')->isEmpty()) {
        $body[] = t('Business Name: @name', ['@name' => $node->get('field_business_name')->value]);
      }
      // Add other relevant fields from node as needed.
      $message['body'] = $body;
      break;

    case 'report_certified':
      // Email to the user who submitted a certified report.
      $message['subject'] = t('Canada Goose Report Submission Confirmation');

      // Create the email body.
      $body = [];
      $body[] = t('This is confirmation that your report has been submitted and certified.');
      $body[] = '';

      // Add report details.
      if (!empty($params['node_title'])) {
        $body[] = t('Report Title: @title', ['@title' => $params['node_title']]);
      }

      // Add report year if available.
      if (!empty($params['report_year'])) {
        $body[] = t('Report Year: @year', ['@year' => $params['report_year']]);
      }

      // Add location information if available.
      if (!empty($params['county']) || !empty($params['state'])) {
        $body[] = '';
        $body[] = t('Location Information:');

        if (!empty($params['county'])) {
          $body[] = t('County: @county', ['@county' => $params['county']]);
        }

        if (!empty($params['state'])) {
          $body[] = t('State: @state', ['@state' => $params['state']]);
        }
      }

      // Add egg count information.
      $body[] = '';
      $body[] = t('Nests with Eggs Destroyed:');

      // Get egg count values with defaults of 0.
      $march = $params['field_qty_nest_egg_destroyed_mar'] ?? 0;
      $april = $params['field_qty_nest_egg_destroyed_apr'] ?? 0;
      $may = $params['field_qty_nest_egg_destroyed_may'] ?? 0;
      $june = $params['field_qty_nest_egg_destroyed_jun'] ?? 0;
      $total = $params['field_qty_nest_egg_destroyed_tot'] ?? 0;

      // Add egg count details to the email.
      $body[] = t('March: @count', ['@count' => $march]);
      $body[] = t('April: @count', ['@count' => $april]);
      $body[] = t('May: @count', ['@count' => $may]);
      $body[] = t('June: @count', ['@count' => $june]);
      $body[] = t('Total: @count', ['@count' => $total]);

      // Add certification timestamp.
      $body[] = '';
      $body[] = t('Date of Submission: @date', ['@date' => \Drupal::service('date.formatter')->format(time(), 'custom', 'n/j/Y')]);

      // Reminder about annual reporting requirements.
      $body[] = '';
      $body[] = t('Reminder: Annual reporting is required to maintain your registration status. Thank you for your submission.');

      // Set the message body.
      $message['body'] = $body;
      break;
  }
}

/**
 * Determines if the current date is within the registration period.
 *
 * Registration can only occur from January 1st to end of June.
 *
 * @return bool
 *   TRUE if within registration period, FALSE otherwise.
 */
function fws_goose_is_registration_period() {
  $date = new \DateTime();
  $month = (int) $date->format('n');

  // Check if month is between January (1) and June (6) inclusive.
  return ($month >= 1 && $month <= 6);
}

/**
 * Determines if the current date is within the activity logging period.
 *
 * Activity can be logged only from January to end of October.
 *
 * @return bool
 *   TRUE if within activity logging period, FALSE otherwise.
 */
function fws_goose_is_activity_logging_period() {
  $date = new \DateTime();
  $month = (int) $date->format('n');

  // Check if month is between January (1) and October (10) inclusive.
  return ($month >= 1 && $month <= 10);
}

/**
 * Checks if a user's registration has expired due to missing activity reports.
 *
 * @param int $uid
 *   The user ID to check.
 *
 * @return bool
 *   TRUE if registration is expired, FALSE otherwise.
 */
function fws_goose_is_registration_expired($uid) {
  // Get user entity.
  $user = User::load($uid);
  if (!$user) {
    return TRUE;
  }

  // Get current year and previous year.
  $current_year = (int) date('Y');
  $previous_year = $current_year - 1;

  // Only check for expiration if we're in a new year.
  // This implements the "Check we are in next year" part of the logic.
  $current_month = (int) date('n');
  if ($current_month >= 1) {
    // Check if user has reported activity for previous year.
    // This would need to be adjusted based on how activity reports are stored.
    $activity_reported = \Drupal::database()->select('node_field_data', 'n')
      ->fields('n', ['nid'])
      ->condition('n.type', 'location', '=')
      ->condition('n.uid', $uid, '=')
      ->condition('n.created', [
        strtotime("$previous_year-01-01 00:00:00"),
        strtotime("$previous_year-12-31 23:59:59"),
      ], 'BETWEEN')
      ->countQuery()
      ->execute()
      ->fetchField();

    // If no activity was reported last year, registration is expired.
    if ($activity_reported == 0) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks if a user can register or renew registration.
 *
 * @param int $uid
 *   The user ID to check.
 *
 * @return array
 *   An array with keys:
 *   - allowed: bool indicating if registration/renewal is allowed
 *   - message: string message explaining why if not allowed
 */
function fws_goose_can_register_or_renew($uid) {
  $result = [
    'allowed' => TRUE,
    'message' => '',
  ];

  // Check registration period.
  if (!fws_goose_is_registration_period()) {
    $result['allowed'] = FALSE;
    $result['message'] = t('Registration and renewal are only available from January 1st to June 30th as per federal regulations.');
    return $result;
  }

  // Check if registration is expired due to missing activity reports.
  if (fws_goose_is_registration_expired($uid)) {
    $result['allowed'] = FALSE;
    $result['message'] = t('Your registration has expired because you have not reported your activity for the previous season. Please submit your activity report before renewing your registration.');
    return $result;
  }

  return $result;
}

/**
 * Implements hook_preprocess_node().
 */
function fws_goose_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Only act on permit nodes.
  if ($node->bundle() === 'permit') {
    $owner = $node->getOwner();
    if ($owner && $owner->id()) {
      $uid = $owner->id();
      $registration_check = fws_goose_can_register_or_renew($uid);

      if (!$registration_check['allowed']) {
        // Check which specific message to display.
        if (strpos($registration_check['message'], 'activity report') !== FALSE) {
          // Message about missing report.
          \Drupal::messenger()->addError($registration_check['message']);
          \Drupal::messenger()->addWarning(t('Please <a href="@url">submit your activity report</a> for the previous season before renewing your registration.', [
            // Note: The URL likely needs to point to the correct report submission page/view.
            // Using node/add/report as a placeholder, adjust if needed.
            '@url' => Url::fromRoute('node.add', ['node_type' => 'report'])->toString(),
          ]));
        }
        else {
          // Other messages (like registration period closed).
          \Drupal::messenger()->addError($registration_check['message']);
        }
      }

      // Load related location nodes for the permit owner.
      $location_nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadByProperties([
          'type' => 'location',
          'uid' => $uid,
          'status' => 1,
        ]);
      $variables['locations'] = $location_nodes;

      // Load related agent/name nodes for the permit owner.
      $agent_nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadByProperties([
          'type' => 'name',
          'uid' => $uid,
          'status' => 1,
        ]);
      $variables['agents'] = $agent_nodes;
    }
    else {
      // Ensure variables exist even if owner is invalid.
      $variables['locations'] = [];
      $variables['agents'] = [];
    }
  }
}

/**
 * Get the user's locations for use in dropdown selector.
 *
 * @return array
 *   An array of location options for the select form element.
 */
function _fws_goose_get_user_locations() {
  $options = ['' => t('- Select a location -')];

  $form_object = \Drupal::routeMatch()->getRouteObject()->getDefault('_entity_form');
  $node = NULL;
  $uid = NULL;
  $permit_number = NULL;

  // Check if this is an edit form.
  if ($form_object && strpos($form_object, 'edit_form') !== FALSE) {
    // Get the node being edited.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && $node->getOwnerId()) {
      $uid = $node->getOwnerId();

      // Get permit number from the node being edited if available.
      if ($node->hasField('field_permit_no') && !$node->get('field_permit_no')->isEmpty()) {
        $permit_number = $node->get('field_permit_no')->value;
      }
    }
  }

  // If no uid from node, use current user.
  if (!$uid) {
    $current_user = \Drupal::currentUser();
    if ($current_user->id() <= 0) {
      return $options;
    }
    $uid = $current_user->id();

    // If no permit number from the node, try to get it from the user.
    if (!$permit_number) {
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
      if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
        $permit_number = $user->get('field_permit_no')->value;
      }
    }
  }

  // Query for location nodes owned by the determined user.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'location')
    ->condition('uid', $uid)
    ->condition('status', 1)
    ->sort('title', 'ASC')
    ->accessCheck(TRUE);

  // Filter by permit number if available.
  if ($permit_number) {
    $query->condition('field_permit_no', $permit_number);
  }

  $nids = $query->execute();

  // Load the nodes and populate options.
  if (!empty($nids)) {
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
    foreach ($nodes as $nid => $node) {
      // Create a descriptive label with county information.
      $county = '';
      if ($node->hasField('field_location_county') && !$node->get('field_location_county')->isEmpty()) {
        $county = $node->get('field_location_county')->value;
      }

      $label = $node->getTitle();
      if (!empty($county)) {
        $label .= ' - ' . $county;
      }

      $options[$nid] = $label;
    }
  }

  return $options;
}

/**
 * Ajax callback for when location is selected.
 */
function _fws_goose_location_selected($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected location node ID.
  $location_nid = $form_state->getValue('location_selector');

  if (!empty($location_nid)) {
    // Set the selected location ID in the hidden field.
    $response->addCommand(new InvokeCommand('input[name="selected_location_id"]', 'val', [$location_nid]));

    // Load the selected location node.
    $location_node = \Drupal::entityTypeManager()->getStorage('node')->load($location_nid);

    if ($location_node) {
      // Extract state and county values.
      $state = '';
      $county = '';

      // Handle state value - check state_ref field first.
      if ($location_node->hasField('field_location_state_ref') && !$location_node->get('field_location_state_ref')->isEmpty()) {
        $target_id = $location_node->get('field_location_state_ref')->target_id;
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($target_id);
        if ($term) {
          $state = $term->getName();
          // Set the value in the form.
          $response->addCommand(new InvokeCommand('input[name="field_location_state[0][value]"]', 'val', [$state]));
        }
      }
      // Fallback to direct state field if present.
      elseif ($location_node->hasField('field_location_state') && !$location_node->get('field_location_state')->isEmpty()) {
        $state = $location_node->get('field_location_state')->value;
        // Set the value in the form.
        $response->addCommand(new InvokeCommand('input[name="field_location_state[0][value]"]', 'val', [$state]));
      }

      if ($location_node->hasField('field_location_county') && !$location_node->get('field_location_county')->isEmpty()) {
        $county = $location_node->get('field_location_county')->value;
        // Set the value in the form.
        $response->addCommand(new InvokeCommand('input[name="field_location_county[0][value]"]', 'val', [$county]));
      }
    }
  }

  // Return the AjaxResponse object.
  return $response;
}

/**
 * Custom validation for report form.
 */
function _fws_goose_permit_report_validate($form, FormStateInterface $form_state) {
  // Check if certification checkbox is checked.
  if (empty($form_state->getValue(['certification_wrapper', 'certification_checkbox']))) {
    $form_state->setErrorByName('certification_wrapper][certification_checkbox', t('You must certify that the information in this report is true and correct.'));
  }
}

/**
 * Helper function to prefill form fields from user entity.
 *
 * @param array $form
 *   The form array to modify.
 * @param bool $is_new_form
 *   Whether this is a new form (TRUE) or an edit form (FALSE).
 */
function _fws_goose_prefill_fields_from_user(&$form, $is_new_form = TRUE) {
  // Only prefill for new forms.
  if (!$is_new_form) {
    return;
  }

  // Get current user.
  $current_user = \Drupal::currentUser();
  if ($current_user->id() <= 0) {
    return;
  }

  // Load full user entity.
  $user = User::load($current_user->id());
  if (!$user) {
    return;
  }

  // Get all user fields.
  $user_fields = $user->getFields();

  // Internal/system fields to skip.
  $system_fields = [
    'uid',
    'uuid',
    'roles',
    'status',
    'created',
    'changed',
    'access',
    'login',
    'init',
    'timezone',
    'langcode',
    'default_langcode',
    'path',
  ];

  // Loop through user fields and check for matching fields in the form.
  foreach ($user_fields as $field_name => $field) {
    // Skip internal/system fields.
    if (in_array($field_name, $system_fields)) {
      continue;
    }

    // Check if form has this field.
    if (isset($form[$field_name]) && !$user->get($field_name)->isEmpty()) {
      $field_value = $user->get($field_name)->value;

      // Set the value in the form - handle typical Drupal form structure.
      if (isset($form[$field_name]['widget'][0]['value'])) {
        $form[$field_name]['widget'][0]['value']['#value'] = $field_value;
        $form[$field_name]['widget'][0]['value']['#default_value'] = $field_value;
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for other relevant forms.
 */
function fws_goose_form_node_form_alter(&$form, $form_state, $form_id) {
  // Apply prefill functionality to other form types as needed.
  $supported_form_types = [
    'node_fws_application_form',
    'node_fws_permit_form',
  ];

  if (in_array($form_id, $supported_form_types)) {
    $is_new_form = empty($form['nid']['#value']);
    _fws_goose_prefill_fields_from_user($form, $is_new_form);
  }
}

/**
 * Helper function to prefill form fields from user entity.
 *
 * This function checks for matching field names between a user entity and form,
 * and prefills the form fields with values from the user entity.
 *
 * @param array &$form
 *   The form array being altered.
 * @param string $form_id
 *   The form ID.
 */
function _fws_goose_prefill_user_fields(&$form, $form_id) {
  // Only process for new node forms, not edit forms.
  if (strpos($form_id, '_edit_form') !== FALSE) {
    return;
  }

  $current_user = \Drupal::currentUser();
  if ($current_user->id() > 0) {
    $user = User::load($current_user->id());
    if (!$user) {
      return;
    }

    // Get all fields from the user entity.
    $user_fields = $user->getFields();

    // Loop through user fields.
    foreach ($user_fields as $field_name => $field) {
      // Skip system fields.
      $system_fields = [
        'uid', 'uuid', 'langcode', 'preferred_langcode', 'preferred_admin_langcode',
        'name', 'pass', 'mail', 'timezone', 'status', 'created', 'changed',
        'access', 'login', 'init', 'roles', 'default_langcode',
      ];

      if (in_array($field_name, $system_fields)) {
        continue;
      }

      // If the form has a field with the same name and the user field is not empty.
      if (isset($form[$field_name]) && !$user->get($field_name)->isEmpty()) {
        $value = $user->get($field_name)->value;

        // Handle widget types: assume single value widgets.
        if (isset($form[$field_name]['widget'][0]['value'])) {
          $form[$field_name]['widget'][0]['value']['#value'] = $value;
          $form[$field_name]['widget'][0]['value']['#default_value'] = $value;
        }
      }
    }
  }
}
