<?php

/**
 * @file
 * Contains fws_goose.module.
 */

use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function fws_goose_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Handle the name node form separately.
  if ($form_id === 'node_name_form' || $form_id === 'node_name_edit_form') {
    // Always make the permit number field disabled.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
      $form['field_permit_no']['widget'][0]['value']['#attributes']['disabled'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }
  }

  if ($form_id === 'node_location_form' || $form_id === 'node_location_edit_form') {
    // Make permit number read-only.
    if (isset($form['field_permit_no'])) {
      $form['field_permit_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // Try to prefill with user's permit number if available.
      $current_user = \Drupal::currentUser();
      if ($current_user->id() > 0) {
        $user = User::load($current_user->id());
        if ($user && $user->hasField('field_permit_no') && !$user->get('field_permit_no')->isEmpty()) {
          $permit_number = $user->get('field_permit_no')->value;
          $form['field_permit_no']['widget'][0]['value']['#value'] = $permit_number;
          $form['field_permit_no']['widget'][0]['value']['#default_value'] = $permit_number;
        }
      }
    }

    // Add the validate button after the access key field.
    $form['field_ca_access_key']['validate_ca'] = [
      '#type' => 'submit',
      '#value' => t('Validate Access'),
      '#name' => 'validate_ca_access',
      '#validate' => ['_fws_goose_validate_ca_access'],
      '#submit' => ['_fws_goose_validate_ca_access_submit'],
      '#limit_validation_errors' => [['field_ca_access_key']],
      '#weight' => 10,
    ];

    // Get the validated county from form state if it exists.
    $validated_county = $form_state->get('ca_validated_county');

    // If we have a validated county, convert state to read-only text field and set to California.
    if ($validated_county) {
      // Store the original state value for form processing.
      $form['field_location_state_ref']['widget']['#validated_state'] = 'CA';

      // Change the state field to a read-only text field.
      $form['field_location_state_ref']['widget']['#type'] = 'textfield';
      $form['field_location_state_ref']['widget']['#value'] = 'California';
      $form['field_location_state_ref']['widget']['#attributes']['readonly'] = TRUE;
      $form['field_location_state_ref']['widget']['#size'] = 60;

      // Add a hidden field to store the actual state reference value.
      $state_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'states',
        'name' => 'CA',
      ]);
      $state_term = reset($state_terms);
      if ($state_term) {
        $form['field_location_state_ref']['widget']['#default_value'] = $state_term->id();
      }
    }
    else {
      // Add state change handler to clear county when switching to CA.
      $form['field_location_state_ref']['widget']['#ajax'] = [
        '#type' => 'select',
        '#event' => 'change',
        '#callback' => '_fws_goose_state_changed',
        '#wrapper' => 'location-county-wrapper',
      ];
    }

    // Wrap county field for AJAX updates.
    $form['field_location_county']['#prefix'] = '<div id="location-county-wrapper">';
    $form['field_location_county']['#suffix'] = '</div>';

    // Get current state value.
    $state_value = NULL;
    $state_values = $form_state->getValue('field_location_state_ref');
    if (!empty($state_values[0]['target_id'])) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
      if ($term) {
        $state_value = $term->getName();
      }
    }
    // Also check for validated state.
    elseif (isset($form['field_location_state_ref']['widget']['#validated_state'])) {
      $state_value = $form['field_location_state_ref']['widget']['#validated_state'];
    }

    // If state is California, make county read-only and clear it if not from dropdown.
    if ($state_value === 'CA') {
      $form['field_location_county']['widget'][0]['value']['#attributes']['readonly'] = TRUE;

      // If we have a validated county, set it in both fields.
      if ($validated_county) {
        $form['field_location_county']['widget'][0]['value']['#value'] = $validated_county;

        // Find and select the matching county in the dropdown.
        if (isset($form['field_ca_county_select']['widget']['#options'])) {
          foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
            if ($tid === '_none') {
              continue;
            }
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
            if ($term && $term->getName() === $validated_county) {
              $form['field_ca_county_select']['widget']['#default_value'] = $tid;
              break;
            }
          }
        }
      }
      else {
        // Clear the county field if no validated county.
        $form['field_location_county']['widget'][0]['value']['#value'] = '';
      }
    }

    // If we have a validated county, only enable selection of that county.
    if ($validated_county && isset($form['field_ca_county_select']['widget']['#options'])) {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if ($term) {
          $county_name = $term->getName();
          // Disable all counties except the validated one.
          if ($county_name !== $validated_county) {
            $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
            $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
          }
        }
      }
    }
    // If no county is validated yet, disable all counties.
    else {
      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid !== '_none') {
          $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Access Code Required]';
          $form['field_ca_county_select']['widget']['#disabled_options'][$tid] = TRUE;
        }
      }
    }

    if (isset($form['field_ca_county_select']['widget']['#options'])) {
      $entity_type_manager = \Drupal::entityTypeManager();
      $term_storage = $entity_type_manager->getStorage('taxonomy_term');

      foreach ($form['field_ca_county_select']['widget']['#options'] as $tid => $label) {
        if ($tid === '_none') {
          continue;
        }

        $term = $term_storage->load($tid);
        if ($term && $term->hasField('field_iscountyrestricted')) {
          $is_restricted = $term->get('field_iscountyrestricted')->value;
          if ($is_restricted === 'Y') {
            // Only append [Restricted] if we haven't already appended [Access Code Required].
            if (strpos($form['field_ca_county_select']['widget']['#options'][$tid], '[Access Code Required]') === FALSE) {
              $form['field_ca_county_select']['widget']['#options'][$tid] .= ' [Restricted]';
            }
          }
        }
      }
    }

    // Add handler for CA county select changes.
    $form['field_ca_county_select']['widget']['#ajax'] = [
      '#type' => 'select',
      '#event' => 'change',
      '#callback' => '_fws_goose_ca_county_changed',
      '#wrapper' => 'location-county-wrapper',
    ];
  }
}

/**
 * AJAX callback for state changes.
 */
function _fws_goose_state_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected state.
  $state_values = $form_state->getValue('field_location_state_ref');
  if (!empty($state_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($state_values[0]['target_id']);
    if ($term && $term->getName() === 'CA') {
      // Clear the county field when switching to CA.
      $form['field_location_county']['widget'][0]['value']['#value'] = '';
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        ['']
      ));
    }
  }

  return $response;
}

/**
 * AJAX callback for CA county select changes.
 */
function _fws_goose_ca_county_changed($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Get the selected county.
  $county_values = $form_state->getValue('field_ca_county_select');
  if (!empty($county_values[0]['target_id'])) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($county_values[0]['target_id']);
    if ($term) {
      // Update the county field with the selected county name.
      $county_name = $term->getName();
      $response->addCommand(new InvokeCommand(
        'input[name="field_location_county[0][value]"]',
        'val',
        [$county_name]
      ));
    }
  }

  return $response;
}

/**
 * Validation function for the CA access key field.
 */
function _fws_goose_validate_ca_access($form, FormStateInterface $form_state) {
  $access_key = $form_state->getValue('field_ca_access_key')[0]['value'];
  if (empty($access_key)) {
    $form_state->setErrorByName('field_ca_access_key', t('Please enter an access key.'));
    return;
  }

  // Look up the access key in taxonomy.
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');
  $query = $term_storage->getQuery()
    ->condition('vid', 'counties')
    ->condition('field_access_key', $access_key)
    ->accessCheck(FALSE)
    ->range(0, 1);
  $tids = $query->execute();

  if (empty($tids)) {
    $form_state->setErrorByName('field_ca_access_key', t('Invalid access key. Please try again or contact support.'));
    return;
  }

  // Get the county name from the term.
  $tid = reset($tids);
  $term = $term_storage->load($tid);
  if (!$term) {
    $form_state->setErrorByName('field_ca_access_key', t('Error loading county information. Please try again.'));
    return;
  }

  // Save the county name in form state.
  $county_name = $term->getName();
  $form_state->set('ca_validated_county', $county_name);
  $form_state->set('ca_validated_county_tid', $tid);
}

/**
 * Submit handler for the CA access key validation.
 */
function _fws_goose_validate_ca_access_submit($form, FormStateInterface $form_state) {
  // Get the validated county from form state.
  $validated_county = $form_state->get('ca_validated_county');
  $validated_county_tid = $form_state->get('ca_validated_county_tid');

  if ($validated_county && $validated_county_tid) {
    \Drupal::messenger()->addStatus(t('Access code validated for @county County.', ['@county' => $validated_county]));
  }

  // Rebuild the form to show the validated county.
  $form_state->setRebuild(TRUE);
}

/**
 * Implements hook_entity_presave().
 */
function fws_goose_entity_presave($entity) {
  // Only process new location nodes.
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'location' || !$entity->isNew()) {
    return;
  }

  // Skip permit number generation if already set.
  if (!$entity->get('field_permit_no')->isEmpty()) {
    return;
  }

  // Get or initialize the permit number counter from configuration.
  $config = \Drupal::configFactory()->getEditable('fws_goose.settings');
  $next_number = $config->get('permit_number_counter');
  if ($next_number === NULL) {
    // Initialize with 1 if no counter exists.
    $next_number = 1;
  }
  else {
    $next_number++;
  }

  // Format the permit number (5 digits + 'A').
  $permit_number = sprintf('%05dA', $next_number);

  // Double check for duplicates.
  $duplicate_check = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->condition('type', 'location')
    ->condition('field_permit_no', $permit_number)
    ->accessCheck(FALSE)
    ->count()
    ->execute();

  if ($duplicate_check > 0) {
    \Drupal::logger('fws_goose')->error('Duplicate permit number detected: @permit', ['@permit' => $permit_number]);
    return;
  }

  // Save the new counter value.
  $config->set('permit_number_counter', $next_number)
    ->save(TRUE);

  // Set the permit number on the entity.
  $entity->set('field_permit_no', $permit_number);

  // Also save the permit number to the user profile.
  $current_user = \Drupal::currentUser();
  if ($current_user->id() > 0) {
    $user = User::load($current_user->id());
    if ($user && $user->hasField('field_permit_no') && $user->get('field_permit_no')->isEmpty()) {
      $user->set('field_permit_no', $permit_number);
      $user->save();
      \Drupal::logger('fws_goose')->notice('Saved permit number @permit to user @uid', [
        '@permit' => $permit_number,
        '@uid' => $current_user->id(),
      ]);
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function fws_goose_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('name', 'Drupal\fws_goose\Form\NameNodeForm');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function fws_goose_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();

  // Check if we're on the add name form page.
  if ($current_path == '/node/add/name') {
    // Check if the current user has a permit number.
    $current_user = \Drupal::currentUser();
    if ($current_user->id() > 0) {
      $user = User::load($current_user->id());

      // If user has no permit number, redirect to location form.
      if (!$user || !$user->hasField('field_permit_no') || $user->get('field_permit_no')->isEmpty()) {
        // Set a message explaining why they're being redirected.
        \Drupal::messenger()->addWarning(t('You must create a location with a permit number before adding a name. Please complete this form first.'));

        // Redirect to the location add form.
        $url = Url::fromUri('internal:/node/add/location')->toString();
        $response = new RedirectResponse($url);
        $response->send();
        exit;
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function fws_goose_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // For title display on user pages.
  if ($route_name == 'entity.user.canonical') {
    $variables['title'] = t('View Registration Form');
  }
}

/**
 * Implements hook_preprocess_user().
 */
function fws_goose_preprocess_user(&$variables) {
  // Get the user entity from the variables.
  $user = $variables['user'];

  // Only proceed if we have a valid user ID.
  if ($user && $user->id()) {
    // Load location nodes for this user.
    $location_nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => 'location',
        'uid' => $user->id(),
        'status' => 1,
      ]);
    $variables['locations'] = $location_nodes;

    // Load agent/name nodes for this user.
    $agent_nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => 'name',
        'uid' => $user->id(),
        'status' => 1,
      ]);
    $variables['agents'] = $agent_nodes;
  }
  else {
    // Initialize empty arrays if no user.
    $variables['locations'] = [];
    $variables['agents'] = [];
  }
}
