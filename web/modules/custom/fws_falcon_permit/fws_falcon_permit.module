<?php

/**
 * @file
 * Primary module hooks for FWS Falcon Permit module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_theme().
 */
function fws_falcon_permit_theme() {
  return [
    'fws_falcon_permit_3_186a' => [
      'render element' => 'form',
    ],
    'fws_falcon_permit_search' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_help().
 */
function fws_falcon_permit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fws_falcon_permit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The FWS Falcon Permit module provides forms for managing falcon permits and reporting activities.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function fws_falcon_permit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach our JS behavior to the permit node form.
  if (in_array($form_id, ['node_permit_3186a_form', 'node_permit_3186a_edit_form'])) {
    $current_user = \Drupal::currentUser();
    $user = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->load($current_user->id());

    $mapping_fields = [
      'sender' => [
        'field_sender_permit_no' => 'field_permit_no',
        'field_sender_first_name' => 'field_first_name',
        'field_sender_middle_name' => 'field_middle_name',
        'field_sender_last_name' => 'field_last_name',
        'field_sender_street_address' => 'field_address_l1',
        'field_sender_city' => 'field_city',
        'field_sender_st_cd' => 'field_state_cd',
        'field_sender_zip_cd' => 'field_zip_cd',
        'field_sender_email_address' => 'mail',
        'field_sender_phone' => 'field_phone1',
      ],
      'recipient' => [
        'field_recipient_permit_no' => 'field_permit_no',
        'field_recipient_first_name' => 'field_first_name',
        'field_recipient_middle_name' => 'field_middle_name',
        'field_recipient_last_name' => 'field_last_name',
        'field_recipient_street_address' => 'field_address_l1',
        'field_recipient_city' => 'field_city',
        'field_recipient_st_cd' => 'field_state_cd',
        'field_recipient_zip_cd' => 'field_zip_cd',
        'field_recipient_email_address' => 'mail',
        'field_recipient_phone' => 'field_phone1',
      ],
    ];
    $user_fields = array_combine($mapping_fields['sender'], $mapping_fields['recipient']);
    $profile = [];
    foreach ($user_fields as $field) {
      if ($user->hasField($field) && !$user->get($field)->isEmpty()) {
        $field_definition = $user->getFieldDefinition($field);
        $field_type = $field_definition->getType();
        $profile[$field] = $field_type === 'entity_reference' ? $user->get($field)->entity->id() : $user->get($field)->value;
      }
    }
    $form['#attached']['drupalSettings']['fws_falcon_permit'] = [
      'mapping_fields' => $mapping_fields,
      'profile' => $profile,
    ];
    $form['#attached']['library'][] = 'fws_falcon_permit/form_3_186a';

    // Make Record ID read-only.
    if (isset($form['field_recno'])) {
      $form['field_recno']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
    }

    // Make Trans Number read-only.
    if (isset($form['field_question_no'])) {
      $form['field_question_no']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function fws_falcon_permit_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity instanceof NodeInterface && $entity->bundle() === 'permit_3186a') {
    // Handle Record ID if it's a new node.
    if ($entity->isNew() && $entity->hasField('field_recno')) {
      // Get the highest record ID from the database.
      $query = \Drupal::database()->select('node__field_recno', 'r');
      $query->addExpression('MAX(CAST(r.field_recno_value AS SIGNED))', 'max_recno');
      $result = $query->execute()->fetchField();

      // Set the new record ID (highest + 1).
      $next_record_id = $result ? $result + 1 : 1;
      $entity->set('field_recno', $next_record_id);

      // Append the record number to the node title.
      $current_title = $entity->getTitle();
      $entity->setTitle($current_title . ' ' . $next_record_id);
    }

    // Handle Trans Number.
    if ($entity->hasField('field_question_no')) {
      if ($entity->isNew()) {
        // Set to 1 for new nodes.
        $entity->set('field_question_no', 1);
      }
      else {
        // Increment existing value.
        $current_trans = $entity->get('field_question_no')->value;
        $entity->set('field_question_no', $current_trans + 1);
      }
    }

    _fws_falcon_permit_generate_system_bird_id($entity);

  }
}

/**
 * Implements hook_node_access().
 */
function fws_falcon_permit_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Only apply to permit_3186a nodes
  if ($node->bundle() !== 'permit_3186a') {
    return AccessResult::neutral();
  }

  // Deny access to anonymous users for all operations
  if ($account->isAnonymous()) {
    return AccessResult::forbidden()
      ->addCacheContexts(['user.roles'])
      ->addCacheTags(['node:' . $node->id()]);
  }

  // For falconers, only allow access to their own nodes
  if (in_array('falconer', $account->getRoles())) {
    // Allow if they are the author
    if ($node->getOwnerId() == $account->id()) {
      return AccessResult::allowed()
        ->cachePerUser()
        ->addCacheTags(['node:' . $node->id()]);
    }
    // Deny if they are not the author
    return AccessResult::forbidden()
      ->cachePerUser()
      ->addCacheTags(['node:' . $node->id()]);
  }

  // For other roles, don't interfere with their access
  return AccessResult::neutral();
}

/**
 * Generate System Bird ID for new permit_3186a node
 * For now this will be unique to the Falconer but not the system as its not clear how to identify the bird is unique system-wide
 */
function _fws_falcon_permit_generate_system_bird_id(EntityInterface $entity) {
  if ($entity->isNew() && $entity instanceof NodeInterface && ($entity->bundle() === 'permit_3186a')  && $entity->hasField('field_system_bird_id')) {
    // Skip if the field already has a value
    if (!$entity->get('field_system_bird_id')->isEmpty()) {
      return;
    }

    // Get the current user (Falconer)
    $current_user = \Drupal::currentUser();
    $falconer_id = $current_user->id();

    $database = \Drupal::database();

    // Query existing bird IDs for this Falconer from node references
    $highest_numeric = 0;

    // First check existing nodes for this falconer
    if ($database->schema()->tableExists('node__field_system_bird_id')) {
      $query = $database->select('node__field_system_bird_id', 'b');
      $query->join('node_field_data', 'n', 'b.entity_id = n.nid');
      $query->join('taxonomy_term_field_data', 't', 'b.field_system_bird_id_target_id = t.tid');
      $query->fields('t', ['name'])
        ->condition('n.uid', $falconer_id)
        ->condition('t.name', 'B%', 'LIKE')
        ->condition('t.vid', 'system_bird_id');

      $results = $query->execute()->fetchAll();

      foreach ($results as $row) {
        $term_name = $row->name;
        if (substr($term_name, 0, 1) === 'B') {
          $numeric = (int) substr($term_name, 1);
          if ($numeric > $highest_numeric) {
            $highest_numeric = $numeric;
          }
        }
      }
    }

    // Generate the next number
    $next_number = $highest_numeric + 1;
    $new_bird_id = 'B' . str_pad($next_number, 5, '0', STR_PAD_LEFT);

    // Create a new taxonomy term for the bird ID
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

    // Check if a term with this name already exists
    $existing_terms = $term_storage->loadByProperties([
      'vid' => 'system_bird_id',
      'name' => $new_bird_id,
    ]);

    if (empty($existing_terms)) {
      // Create new term
      $term = $term_storage->create([
        'vid' => 'system_bird_id',
        'name' => $new_bird_id,
      ]);
      $term->save();
      $entity->set('field_system_bird_id', $term->id());
    } else {
      // Use the existing term
      $term = reset($existing_terms);
      $entity->set('field_system_bird_id', $term->id());
    }
  }
}
